diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/dafny_impl/src/implementation_from_dafny.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/dafny_impl/src/implementation_from_dafny.rs
index ba5de6ff..469a527f 100644
--- b/TestModels/SimpleTypes/SimpleString/runtimes/rust/dafny_impl/src/implementation_from_dafny.rs
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/dafny_impl/src/implementation_from_dafny.rs
@@ -1,89 +1,637 @@
 #![allow(warnings, unconditional_panic)]
 #![allow(nonstandard_style)]
-extern crate dafny_runtime;
-mod _System {
-  #[derive(Clone, PartialEq)]
-  #[repr(transparent)]
-  pub struct nat(pub ::dafny_runtime::DafnyInt);
-  impl ::std::default::Default for nat {
-    fn default() -> Self {
-      nat(::std::default::Default::default())
-    }
-  }
-  impl ::dafny_runtime::DafnyPrint for nat {
-    fn fmt_print(&self, _formatter: &mut ::std::fmt::Formatter, in_seq: bool) -> ::std::fmt::Result {
-      ::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)
-    }
-  }
-  impl ::std::ops::Deref for nat {
-    type Target = ::dafny_runtime::DafnyInt;
-    fn deref(&self) -> &Self::Target {
-      &self.0
-    }
-  }
-  #[derive(PartialEq)]
-  pub enum Tuple2<T0, T1> {
-    _T2 { _0: T0, _1: T1 },
-    _PhantomVariant(::std::marker::PhantomData::<T0>, ::std::marker::PhantomData::<T1>)
-  }
-  impl <T0: Clone + ::dafny_runtime::DafnyPrint + 'static, T1: Clone + ::dafny_runtime::DafnyPrint + 'static>Tuple2<T0, T1> {
-    pub fn _0(&self) -> &T0 {
-      match self {
-        Tuple2::_T2 { _0, _1, } => _0,
-        Tuple2::_PhantomVariant(..) => panic!()
-      }
-    }
-    pub fn _1(&self) -> &T1 {
-      match self {
-        Tuple2::_T2 { _0, _1, } => _1,
-        Tuple2::_PhantomVariant(..) => panic!()
-      }
-    }
-  }
-  impl <T0: Clone + ::dafny_runtime::DafnyPrint + 'static, T1: Clone + ::dafny_runtime::DafnyPrint + 'static>::dafny_runtime::DafnyPrint for Tuple2<T0, T1> {
-    fn fmt_print(&self, _formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {
-      match self {
-        Tuple2::_T2 { _0, _1, } => {
-          write!(_formatter, "_System.Tuple2._T2(")?;
-          ::dafny_runtime::DafnyPrint::fmt_print(_0, _formatter, false)?;
-          write!(_formatter, ", ")?;
-          ::dafny_runtime::DafnyPrint::fmt_print(_1, _formatter, false)?;
-          write!(_formatter, ")")?;
-          Ok(())
+pub extern crate dafny_runtime;
+pub extern crate dafny_standard_library;
+pub use dafny_standard_library::implementation_from_dafny::*;
+
+pub mod r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes {
+    /* datatype DafnyCallEvent<I, O> = DafnyCallEvent(input: I, output: O) */
+    #[derive(Clone)]
+    pub struct DafnyCallEvent<I: ::dafny_runtime::DafnyType, O: ::dafny_runtime::DafnyType> {
+        input: I,
+        output: O,
+    }
+    impl<I: ::dafny_runtime::DafnyType, O: ::dafny_runtime::DafnyType> ::core::fmt::Debug
+        for DafnyCallEvent<I, O>
+    {
+        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
+            f.debug_struct("DafnyCallEvent")
+                .field("input", &self.input)
+                .field("output", &self.output)
+                .finish()
+        }
+    }
+    impl<I: ::dafny_runtime::DafnyType, O: ::dafny_runtime::DafnyType> ::dafny_runtime::DafnyPrint
+        for DafnyCallEvent<I, O>
+    {
+        fn fmt_print(&self, f: &mut std::fmt::Formatter<'_>, in_seq: bool) -> std::fmt::Result {
+            write!(
+                f,
+                "simple.types.smithystring.internaldafny.types.DafnyCallEvent("
+            )?;
+            self.input.fmt_print(f, false)?;
+            write!(f, ",")?;
+            self.output.fmt_print(f, false)?;
+            write!(f, ")")
+        }
+    }
+    impl<I: ::dafny_runtime::DafnyTypeEq, O: ::dafny_runtime::DafnyTypeEq>
+        PartialEq<DafnyCallEvent<I, O>> for DafnyCallEvent<I, O>
+    {
+        fn eq(&self, other: &DafnyCallEvent<I, O>) -> bool {
+            self.input == other.input && self.output == other.output
+        }
+    }
+    impl<I: ::dafny_runtime::DafnyTypeEq, O: ::dafny_runtime::DafnyTypeEq> Eq for DafnyCallEvent<I, O> {}
+    impl<I: ::dafny_runtime::DafnyTypeEq, O: ::dafny_runtime::DafnyTypeEq> ::core::hash::Hash
+        for DafnyCallEvent<I, O>
+    {
+        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
+            self.input.hash(state);
+            self.output.hash(state);
+        }
+    }
+
+    /*
+     datatype GetStringInput = | GetStringInput (
+      nameonly value: Option<string> := Option.None
+    )
+    */
+    #[derive(Clone)]
+    pub enum GetStringInput {
+        GetStringInput {
+            value: ::std::rc::Rc<
+                super::r#_Wrappers_Compile::Option<::dafny_runtime::DafnyStringUTF16>,
+            >,
         },
-        Tuple2::_PhantomVariant(..) => {panic!()}
-      }
-    }
-  }
-  impl <T0: ::std::default::Default, T1: ::std::default::Default>::std::default::Default for Tuple2<T0, T1> {
-    fn default() -> Self {
-      Tuple2::_T2 {
-        _0: ::std::default::Default::default(),
-        _1: ::std::default::Default::default()
-      }
-    }
-  }
-  #[derive(PartialEq)]
-  pub enum Tuple0 {
-    _T0 {}
-  }
-  impl Tuple0 {}
-  impl ::dafny_runtime::DafnyPrint for Tuple0 {
-    fn fmt_print(&self, _formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {
-      match self {
-        Tuple0::_T0 { } => {
-          write!(_formatter, "_System.Tuple0._T0")?;
-          Ok(())
-        }
-      }
-    }
-  }
-  impl ::std::default::Default for Tuple0 {
-    fn default() -> Self {
-      Tuple0::_T0 {}
-    }
-  }
+    }
+    impl ::std::convert::AsRef<GetStringInput> for &GetStringInput {
+        fn as_ref(&self) -> Self {
+            self
+        }
+    }
+    impl GetStringInput {
+        pub fn value(
+            &self,
+        ) -> ::std::rc::Rc<super::r#_Wrappers_Compile::Option<::dafny_runtime::DafnyStringUTF16>>
+        {
+            match self {
+                GetStringInput::GetStringInput { value } => value.clone(),
+            }
+        }
+    }
+    impl ::core::fmt::Debug for GetStringInput {
+        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
+            ::dafny_runtime::DafnyPrint::fmt_print(self, f, false)
+        }
+    }
+    impl ::dafny_runtime::DafnyPrint for GetStringInput {
+        fn fmt_print(&self, f: &mut std::fmt::Formatter<'_>, in_seq: bool) -> std::fmt::Result {
+            write!(
+                f,
+                "simple.types.smithystring.internaldafny.types.GetStringInput(value := "
+            )?;
+            self.value().fmt_print(f, false)?;
+            write!(f, ")")
+        }
+    }
+    impl PartialEq<GetStringInput> for GetStringInput {
+        fn eq(&self, other: &GetStringInput) -> bool {
+            self.value() == other.value()
+        }
+    }
+    impl Eq for GetStringInput {}
+    impl ::core::hash::Hash for GetStringInput {
+        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
+            self.value().hash(state);
+        }
+    }
+
+    /*
+    datatype GetStringOutput = | GetStringOutput (
+    nameonly value: Option<string> := Option.None
+    ) */
+    #[derive(Clone)]
+    pub enum GetStringOutput {
+        GetStringOutput {
+            value: ::std::rc::Rc<
+                super::r#_Wrappers_Compile::Option<::dafny_runtime::DafnyStringUTF16>,
+            >,
+        },
+    }
+    impl GetStringOutput {
+        pub fn value(
+            &self,
+        ) -> ::std::rc::Rc<super::r#_Wrappers_Compile::Option<::dafny_runtime::DafnyStringUTF16>>
+        {
+            match self {
+                GetStringOutput::GetStringOutput { value } => value.clone(),
+            }
+        }
+    }
+    impl ::std::convert::AsRef<GetStringOutput> for &GetStringOutput {
+        fn as_ref(&self) -> Self {
+            self
+        }
+    }
+    impl ::core::fmt::Debug for GetStringOutput {
+        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
+            ::dafny_runtime::DafnyPrint::fmt_print(self, f, false)
+        }
+    }
+    impl ::dafny_runtime::DafnyPrint for GetStringOutput {
+        fn fmt_print(&self, f: &mut std::fmt::Formatter<'_>, in_seq: bool) -> std::fmt::Result {
+            write!(
+                f,
+                "simple.types.smithystring.internaldafny.types.GetStringOutput(value := "
+            )?;
+            self.value().fmt_print(f, false)?;
+            write!(f, ")")
+        }
+    }
+    impl PartialEq<GetStringOutput> for GetStringOutput {
+        fn eq(&self, other: &GetStringOutput) -> bool {
+            self.value() == other.value()
+        }
+    }
+    impl Eq for GetStringOutput {}
+    impl ::core::hash::Hash for GetStringOutput {
+        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
+            self.value().hash(state);
+        }
+    }
+
+    /*
+    datatype SimpleStringConfig = | SimpleStringConfig (
+    ) */
+    #[derive(Clone)]
+    pub enum SimpleStringConfig {
+        SimpleStringConfig {},
+    }
+    impl ::std::convert::AsRef<SimpleStringConfig> for &SimpleStringConfig {
+        fn as_ref(&self) -> Self {
+            self
+        }
+    }
+    impl ::core::fmt::Debug for SimpleStringConfig {
+        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
+            f.debug_struct("SimpleStringConfig").finish()
+        }
+    }
+    impl ::dafny_runtime::DafnyPrint for SimpleStringConfig {
+        fn fmt_print(&self, f: &mut std::fmt::Formatter<'_>, in_seq: bool) -> std::fmt::Result {
+            write!(
+                f,
+                "simple.types.smithystring.internaldafny.types.SimpleStringConfig()"
+            )
+        }
+    }
+    impl PartialEq<SimpleStringConfig> for SimpleStringConfig {
+        fn eq(&self, other: &SimpleStringConfig) -> bool {
+            true
+        }
+    }
+    impl Eq for SimpleStringConfig {}
+    impl ::core::hash::Hash for SimpleStringConfig {
+        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {}
+    }
+
+    pub struct ISimpleTypesStringClientCallHistory {}
+    impl ISimpleTypesStringClientCallHistory {
+        fn ctor(this: *mut ISimpleTypesStringClientCallHistory) {}
+    }
+    pub trait ISimpleTypesStringClient {
+        fn GetString(
+            self: &Self,
+            input: &::std::rc::Rc<
+                super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringInput,
+            >,
+        ) -> ::std::rc::Rc<
+            super::r#_Wrappers_Compile::Result<
+                ::std::rc::Rc<
+                    super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput,
+                >,
+                ::std::rc::Rc<super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error>,
+            >,
+        >;
+        fn GetStringKnownValue(
+            self: &Self,
+            input: &::std::rc::Rc<
+                super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringInput,
+            >,
+        ) -> ::std::rc::Rc<
+            super::r#_Wrappers_Compile::Result<
+                ::std::rc::Rc<
+                    super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput,
+                >,
+                ::std::rc::Rc<super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error>,
+            >,
+        >;
+        fn GetStringUTF8(
+            self: &Self,
+            input: &::std::rc::Rc<
+                super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringInput,
+            >,
+        ) -> ::std::rc::Rc<
+            super::r#_Wrappers_Compile::Result<
+                ::std::rc::Rc<
+                    super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput,
+                >,
+                ::std::rc::Rc<super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error>,
+            >,
+        >;
+    }
+    /*
+    datatype Error =
+    | CollectionOfErrors(list: seq<Error>, nameonly message: string)
+    | Opaque(obj: object)
+    */
+    #[derive(Clone)]
+    pub enum Error {
+        CollectionOfErrors {
+            list: ::dafny_runtime::Sequence<Error>,
+            message: ::dafny_runtime::DafnyStringUTF16,
+        },
+        Opaque {
+            obj: *mut dyn ::std::any::Any,
+        },
+    }
+    impl ::core::fmt::Debug for Error {
+        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
+            match self {
+                Error::CollectionOfErrors { list, message } => f
+                    .debug_struct("Error::CollectionOfErrors")
+                    .field("list", list)
+                    .field("message", message)
+                    .finish(),
+                Error::Opaque { obj } => f.debug_struct("Error::Opaque").field("obj", obj).finish(),
+            }
+        }
+    }
+    impl ::dafny_runtime::DafnyPrint for Error {
+        fn fmt_print(&self, f: &mut std::fmt::Formatter<'_>, in_seq: bool) -> std::fmt::Result {
+            match self {
+                Error::CollectionOfErrors { list, message } => {
+                    write!(f, "Error::CollectionOfErrors(list := ")?;
+                    list.fmt_print(f, false)?;
+                    write!(f, ", message := ")?;
+                    message.fmt_print(f, false)?;
+                    write!(f, ")")
+                }
+                Error::Opaque { obj } => {
+                    write!(f, "Error::Opaque(obj := ")?;
+                    obj.fmt_print(f, false)?;
+                    write!(f, ")")
+                }
+            }
+        }
+    }
+    impl PartialEq<Error> for Error {
+        fn eq(&self, other: &Error) -> bool {
+            match self {
+                Error::CollectionOfErrors { list, message } => match other {
+                    Error::CollectionOfErrors {
+                        list: other_list,
+                        message: other_message,
+                    } => list == other_list && message == other_message,
+                    _ => false,
+                },
+                Error::Opaque { obj } => match other {
+                    Error::Opaque { obj: other_obj } => obj == other_obj,
+                    _ => false,
+                },
+            }
+        }
+    }
+    impl Eq for Error {}
+    impl ::core::hash::Hash for Error {
+        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
+            match self {
+                Error::CollectionOfErrors { list, message } => {
+                    list.hash(state);
+                    message.hash(state);
+                }
+                Error::Opaque { obj } => obj.hash(state),
+            }
+        }
+    }
+
+    pub type OpaqueError = Error;
+}
+mod r#_SimpleStringImpl_Compile {
+    pub struct _default {}
+    impl _default {
+        pub fn new() -> Self {
+            _default {}
+        }
+        pub fn _allocated() -> *mut Self {
+            ::dafny_runtime::allocate::<Self>()
+        }
+        pub fn GetString(
+            config: &::std::rc::Rc<super::r#_SimpleStringImpl_Compile::Config>,
+            input: &::std::rc::Rc<
+                super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringInput,
+            >,
+        ) -> ::std::rc::Rc<
+            super::r#_Wrappers_Compile::Result<
+                ::std::rc::Rc<
+                    super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput,
+                >,
+                ::std::rc::Rc<super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error>,
+            >,
+        > {
+            let mut output = ::dafny_runtime::MaybePlacebo::<::std::rc::Rc<super::r#_Wrappers_Compile::Result<::std::rc::Rc<super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput>, ::std::rc::Rc<super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error>>>>::new();
+            let mut res: ::std::rc::Rc<super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput> = ::std::rc::Rc::new(super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput::GetStringOutput {
+            value: input.value().clone()
+          });
+            res = ::std::rc::Rc::new(super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput::GetStringOutput {
+            value: input.value().clone()
+          });
+            output = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(super::r#_Wrappers_Compile::Result::<::std::rc::Rc<super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput>, ::std::rc::Rc<super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error>>::Success {
+              value: res.clone()
+            }));
+            return output.read();
+            return output.read();
+        }
+        pub fn GetStringKnownValue(
+            config: &::std::rc::Rc<super::r#_SimpleStringImpl_Compile::Config>,
+            input: &::std::rc::Rc<
+                super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringInput,
+            >,
+        ) -> ::std::rc::Rc<
+            super::r#_Wrappers_Compile::Result<
+                ::std::rc::Rc<
+                    super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput,
+                >,
+                ::std::rc::Rc<super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error>,
+            >,
+        > {
+            let mut output = ::dafny_runtime::MaybePlacebo::<::std::rc::Rc<super::r#_Wrappers_Compile::Result<::std::rc::Rc<super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput>, ::std::rc::Rc<super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error>>>>::new();
+            if !matches!(
+                input.value().as_ref(),
+                super::r#_Wrappers_Compile::Option::Some { .. }
+            ) {
+                panic!("Halt")
+            };
+            if !(input.value().value().clone()
+                == ::dafny_runtime::string_utf16_of("TEST_SIMPLE_STRING_KNOWN_VALUE"))
+            {
+                panic!("Halt")
+            };
+            let mut res: ::std::rc::Rc<super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput> = ::std::rc::Rc::new(super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput::GetStringOutput {
+            value: input.value().clone()
+          });
+            res = ::std::rc::Rc::new(super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput::GetStringOutput {
+            value: input.value().clone()
+          });
+            output = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(super::r#_Wrappers_Compile::Result::<::std::rc::Rc<super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput>, ::std::rc::Rc<super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error>>::Success {
+              value: res.clone()
+            }));
+            return output.read();
+            return output.read();
+        }
+        pub fn GetStringUTF8(
+            config: &::std::rc::Rc<super::r#_SimpleStringImpl_Compile::Config>,
+            input: &::std::rc::Rc<
+                super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringInput,
+            >,
+        ) -> ::std::rc::Rc<
+            super::r#_Wrappers_Compile::Result<
+                ::std::rc::Rc<
+                    super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput,
+                >,
+                ::std::rc::Rc<super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error>,
+            >,
+        > {
+            let mut output = ::dafny_runtime::MaybePlacebo::<::std::rc::Rc<super::r#_Wrappers_Compile::Result<::std::rc::Rc<super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput>, ::std::rc::Rc<super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error>>>>::new();
+            if !matches!(
+                input.value().as_ref(),
+                super::r#_Wrappers_Compile::Option::Some { .. }
+            ) {
+                panic!("Halt")
+            };
+            let mut res: ::std::rc::Rc<super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput> = ::std::rc::Rc::new(super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput::GetStringOutput {
+            value: input.value().clone()
+          });
+            res = ::std::rc::Rc::new(super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput::GetStringOutput {
+            value: input.value().clone()
+          });
+            output = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(super::r#_Wrappers_Compile::Result::<::std::rc::Rc<super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput>, ::std::rc::Rc<super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error>>::Success {
+              value: res.clone()
+            }));
+            return output.read();
+            return output.read();
+        }
+    }
+    impl ::std::default::Default for _default {
+        fn default() -> Self {
+            _default::new()
+        }
+    }
+    impl ::dafny_runtime::DafnyPrint for _default {
+        fn fmt_print(
+            &self,
+            _formatter: &mut ::std::fmt::Formatter,
+            _in_seq: bool,
+        ) -> std::fmt::Result {
+            write!(_formatter, "SimpleStringImpl_Compile.__default")
+        }
+    }
+    impl ::std::cmp::PartialEq for _default {
+        fn eq(&self, other: &Self) -> bool {
+            ::std::ptr::eq(self, other)
+        }
+    }
+    #[derive(PartialEq, Clone)]
+    pub enum Config {
+        Config {},
+    }
+    impl Config {}
+    impl ::dafny_runtime::DafnyPrint for Config {
+        fn fmt_print(
+            &self,
+            _formatter: &mut ::std::fmt::Formatter,
+            _in_seq: bool,
+        ) -> std::fmt::Result {
+            match self {
+                Config::Config {} => {
+                    write!(_formatter, "SimpleStringImpl_Compile.Config.Config")?;
+                    Ok(())
+                }
+            }
+        }
+    }
+    impl ::std::default::Default for Config {
+        fn default() -> Config {
+            Config::Config {}
+        }
+    }
+    impl ::std::convert::AsRef<Config> for &Config {
+        fn as_ref(&self) -> Self {
+            self
+        }
+    }
+}
+// SimpleString
+pub mod r#_simple_dtypes_dsmithystring_dinternaldafny {
+    pub struct _default {}
+    impl _default {
+        pub fn new() -> Self {
+            _default {}
+        }
+        pub fn DefaultSimpleStringConfig(
+        ) -> super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::SimpleStringConfig
+        {
+            super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::SimpleStringConfig::SimpleStringConfig{}
+        }
+        /*method SimpleString(config: SimpleStringConfig)
+        returns (res: Result<ISimpleTypesStringClient, Error>) {
+            var client := new SimpleStringClient(Operations.Config);
+            return Success(client);
+        } */
+    pub fn SimpleString(config: &::std::rc::Rc<super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::SimpleStringConfig>)
+        -> ::std::rc::Rc<super::r#_Wrappers_Compile::Result<*mut dyn super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::ISimpleTypesStringClient, ::std::rc::Rc<super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error>>>{
+            let client: *mut SimpleStringClient = ::dafny_runtime::allocate::<SimpleStringClient>();
+            SimpleStringClient::_ctor(
+                client,
+                &::std::rc::Rc::new(super::r#_SimpleStringImpl_Compile::Config::Config {}),
+            );
+            let v = client as *mut dyn super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::ISimpleTypesStringClient;
+            // build a success
+            ::std::rc::Rc::new(super::r#_Wrappers_Compile::Result::<*mut dyn super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::ISimpleTypesStringClient, ::std::rc::Rc<super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error>>::Success{
+          value: v
+      })
+        }
+    }
+
+    struct SimpleStringClient {
+        r#_i_config: ::std::rc::Rc<super::r#_SimpleStringImpl_Compile::Config>,
+    }
+
+    impl SimpleStringClient {
+        fn _ctor(
+            this: *mut SimpleStringClient,
+            config: &::std::rc::Rc<super::r#_SimpleStringImpl_Compile::Config>,
+        ) {
+            let mut _i_set_config = false;
+            ::dafny_runtime::update_field_uninit!(this, r#_i_config, _i_set_config, config.clone());
+        }
+        fn config(&self) -> ::std::rc::Rc<super::r#_SimpleStringImpl_Compile::Config> {
+            self.r#_i_config.clone()
+        }
+    }
+    impl super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::ISimpleTypesStringClient
+        for SimpleStringClient
+    {
+        fn GetString(
+            self: &Self,
+            input: &::std::rc::Rc<
+                super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringInput,
+            >,
+        ) -> ::std::rc::Rc<
+            super::r#_Wrappers_Compile::Result<
+                ::std::rc::Rc<
+                    super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput,
+                >,
+                ::std::rc::Rc<super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error>,
+            >,
+        > {
+            super::r#_SimpleStringImpl_Compile::_default::GetString(&self.config(), input)
+        }
+        fn GetStringKnownValue(
+            self: &Self,
+            input: &::std::rc::Rc<
+                super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringInput,
+            >,
+        ) -> ::std::rc::Rc<
+            super::r#_Wrappers_Compile::Result<
+                ::std::rc::Rc<
+                    super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput,
+                >,
+                ::std::rc::Rc<super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error>,
+            >,
+        > {
+            super::r#_SimpleStringImpl_Compile::_default::GetStringKnownValue(&self.config(), input)
+        }
+        fn GetStringUTF8(
+            self: &Self,
+            input: &::std::rc::Rc<
+                super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringInput,
+            >,
+        ) -> ::std::rc::Rc<
+            super::r#_Wrappers_Compile::Result<
+                ::std::rc::Rc<
+                    super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput,
+                >,
+                ::std::rc::Rc<super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error>,
+            >,
+        > {
+            super::r#_SimpleStringImpl_Compile::_default::GetStringUTF8(&self.config(), input)
+        }
+    }
+    ::dafny_runtime::UpcastTo!(
+        SimpleStringClient,
+        dyn super::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::ISimpleTypesStringClient
+    );
+}
+mod r#_StandardLibraryInterop_Compile {
+    pub struct WrappersInterop {}
+    impl WrappersInterop {
+        pub fn new() -> Self {
+            WrappersInterop {}
+        }
+        pub fn _allocated() -> *mut Self {
+            ::dafny_runtime::allocate::<Self>()
+        }
+        pub fn CreateStringSome(
+            s: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
+        ) -> ::std::rc::Rc<
+            super::r#_Wrappers_Compile::Option<
+                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
+            >,
+        > {
+            ::std::rc::Rc::new(super::r#_Wrappers_Compile::Option::<
+                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
+            >::Some {
+                value: s.clone(),
+            })
+        }
+        pub fn CreateStringNone() -> ::std::rc::Rc<
+            super::r#_Wrappers_Compile::Option<
+                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
+            >,
+        > {
+            ::std::rc::Rc::new(super::r#_Wrappers_Compile::Option::<
+                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
+            >::None {})
+        }
+        pub fn CreateBooleanSome(
+            b: bool,
+        ) -> ::std::rc::Rc<super::r#_Wrappers_Compile::Option<bool>> {
+            ::std::rc::Rc::new(super::r#_Wrappers_Compile::Option::<bool>::Some { value: b })
+        }
+        pub fn CreateBooleanNone() -> ::std::rc::Rc<super::r#_Wrappers_Compile::Option<bool>> {
+            ::std::rc::Rc::new(super::r#_Wrappers_Compile::Option::<bool>::None {})
+        }
+    }
+    impl ::std::default::Default for WrappersInterop {
+        fn default() -> Self {
+            WrappersInterop::new()
+        }
+    }
+    impl ::dafny_runtime::DafnyPrint for WrappersInterop {
+        fn fmt_print(
+            &self,
+            _formatter: &mut ::std::fmt::Formatter,
+            _in_seq: bool,
+        ) -> std::fmt::Result {
+            write!(_formatter, "StandardLibraryInterop_Compile.WrappersInterop")
+        }
+    }
+    impl ::std::cmp::PartialEq for WrappersInterop {
+        fn eq(&self, other: &Self) -> bool {
+            ::std::ptr::eq(self, other)
+        }
+    }
 }
-mod _module {
-  
-}
\ No newline at end of file
+mod _module {}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/client.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/client.rs
new file mode 100644
index 00000000..0b44b7d5
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/client.rs
@@ -0,0 +1,65 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use aws_smithy_types::error::operation::BuildError;
+
+#[derive(Debug)]
+pub(crate) struct Handle {
+    pub(crate) conf: crate::Config,
+    pub(crate) inner: *mut dyn ::simple_string_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::ISimpleTypesStringClient
+}
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct Client {
+    handle: ::std::sync::Arc<Handle>,
+}
+
+impl Client {
+    /// Creates a new client from the service [`Config`](crate::Config).
+    #[track_caller]
+    pub fn from_conf(conf: crate::Config) -> Result<Self, BuildError> {
+        // If this service had any configuration properties,
+        // they would need converting here too.
+        let inner_config = ::std::rc::Rc::new(
+            ::simple_string_dafny::_simple_dtypes_dsmithystring_dinternaldafny::_default::DefaultSimpleStringConfig());
+        let inner =
+            ::simple_string_dafny::_simple_dtypes_dsmithystring_dinternaldafny::_default::SimpleString(&inner_config);
+        if matches!(
+            inner.as_ref(),
+            ::simple_string_dafny::_Wrappers_Compile::Result::Failure { .. }
+        ) {
+            // TODO: convert error - the potential types are not modeled!
+            return Err(BuildError::other(
+                ::aws_smithy_types::error::metadata::ErrorMetadata::builder()
+                    .message("Invalid client config")
+                    .build(),
+            ));
+        }
+        let handle = Handle {
+            conf: conf.clone(),
+            inner: inner.Extract(),
+        };
+        Ok(Self {
+            handle: ::std::sync::Arc::new(handle),
+        })
+    }
+
+    /// Returns the client's configuration.
+    pub fn config(&self) -> &crate::Config {
+        &self.handle.conf
+    }
+}
+
+impl Drop for Handle {
+    fn drop(&mut self) {
+        // Ensure the Dafny values we created by calling SimpleString are deallocated.
+        unsafe {
+            drop(Box::from_raw(self.inner));
+        }
+    }
+}
+
+mod get_string;
+
+mod get_string_known_value;
+
+mod get_string_utf8;
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/client/get_string.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/client/get_string.rs
new file mode 100644
index 00000000..0b547304
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/client/get_string.rs
@@ -0,0 +1,13 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`GetString`](crate::operation::get_string::builders::GetStringFluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(impl Into<Option<String>>)`](crate::operation::get_string::builders::GetStringFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::get_string::builders::GetStringFluentBuilder::set_name):(undocumented)<br>
+    /// - On success, responds with [`GetStringOutput`](crate::operation::get_string::GetStringOutput) with field(s):
+    ///   - [`value(Option<String>)`](crate::operation::get_string::GetStringOutput::value): (undocumented)
+    /// - On failure, responds with [`SdkError<GetStringError>`](crate::operation::get_string::GetStringError)
+    pub fn get_string(&self) -> crate::operation::get_string::builders::GetStringFluentBuilder {
+        crate::operation::get_string::builders::GetStringFluentBuilder::new(self.handle.clone())
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/client/get_string_known_value.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/client/get_string_known_value.rs
new file mode 100644
index 00000000..6ce27235
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/client/get_string_known_value.rs
@@ -0,0 +1,17 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`GetStringKnownValue`](crate::operation::get_string_known_value::builders::GetStringKnownValueFluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(impl Into<Option<String>>)`](crate::operation::get_string_known_value::builders::GetStringKnownValueFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::get_string_known_value::builders::GetStringKnownValueFluentBuilder::set_name):(undocumented)<br>
+    /// - On success, responds with [`GetStringKnownValueOutput`](crate::operation::get_string_known_value::GetStringKnownValueOutput) with field(s):
+    ///   - [`value(Option<String>)`](crate::operation::get_string_known_value::GetStringKnownValueOutput::value): (undocumented)
+    /// - On failure, responds with [`SdkError<GetStringKnownValueError>`](crate::operation::get_string_known_value::GetStringKnownValueError)
+    pub fn get_string_known_value(
+        &self,
+    ) -> crate::operation::get_string_known_value::builders::GetStringKnownValueFluentBuilder {
+        crate::operation::get_string_known_value::builders::GetStringKnownValueFluentBuilder::new(
+            self.handle.clone(),
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/client/get_string_single_value.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/client/get_string_single_value.rs
new file mode 100644
index 00000000..6ce27235
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/client/get_string_single_value.rs
@@ -0,0 +1,17 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`GetStringKnownValue`](crate::operation::get_string_known_value::builders::GetStringKnownValueFluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(impl Into<Option<String>>)`](crate::operation::get_string_known_value::builders::GetStringKnownValueFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::get_string_known_value::builders::GetStringKnownValueFluentBuilder::set_name):(undocumented)<br>
+    /// - On success, responds with [`GetStringKnownValueOutput`](crate::operation::get_string_known_value::GetStringKnownValueOutput) with field(s):
+    ///   - [`value(Option<String>)`](crate::operation::get_string_known_value::GetStringKnownValueOutput::value): (undocumented)
+    /// - On failure, responds with [`SdkError<GetStringKnownValueError>`](crate::operation::get_string_known_value::GetStringKnownValueError)
+    pub fn get_string_known_value(
+        &self,
+    ) -> crate::operation::get_string_known_value::builders::GetStringKnownValueFluentBuilder {
+        crate::operation::get_string_known_value::builders::GetStringKnownValueFluentBuilder::new(
+            self.handle.clone(),
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/client/get_string_utf8.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/client/get_string_utf8.rs
new file mode 100644
index 00000000..45dce92e
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/client/get_string_utf8.rs
@@ -0,0 +1,17 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`GetStringUTF8`](crate::operation::get_string_utf8::builders::GetStringUTF8FluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(impl Into<Option<String>>)`](crate::operation::get_string_utf8::builders::GetStringUTF8FluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::get_string_utf8::builders::GetStringUTF8FluentBuilder::set_name):(undocumented)<br>
+    /// - On success, responds with [`GetStringUTF8Output`](crate::operation::get_string_utf8::GetStringUTF8Output) with field(s):
+    ///   - [`value(Option<String>)`](crate::operation::get_string_utf8::GetStringUTF8Output::value): (undocumented)
+    /// - On failure, responds with [`SdkError<GetStringUTF8Error>`](crate::operation::get_string_utf8::GetStringUTF8Error)
+    pub fn get_string_utf8(
+        &self,
+    ) -> crate::operation::get_string_utf8::builders::GetStringUTF8FluentBuilder {
+        crate::operation::get_string_utf8::builders::GetStringUTF8FluentBuilder::new(
+            self.handle.clone(),
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/config.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/config.rs
new file mode 100644
index 00000000..3bc5be94
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/config.rs
@@ -0,0 +1,128 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+/// Configuration for a simple service client.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct Config {
+    behavior_version: ::std::option::Option<crate::config::BehaviorVersion>,
+}
+impl Config {
+    /// Constructs a config builder.
+    pub fn builder() -> Builder {
+        Builder::default()
+    }
+    /// Converts this config back into a builder so that it can be tweaked.
+    pub fn to_builder(&self) -> Builder {
+        Builder {
+            behavior_version: self.behavior_version.clone(),
+        }
+    }
+}
+/// Builder for creating a `Config`.
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct Builder {
+    pub(crate) behavior_version: ::std::option::Option<crate::config::BehaviorVersion>,
+}
+impl ::std::default::Default for Builder {
+    fn default() -> Self {
+        Self {
+            behavior_version: ::std::default::Default::default(),
+        }
+    }
+}
+impl Builder {
+    /// Constructs a config builder.
+    pub fn new() -> Self {
+        Self::default()
+    }
+
+    /// Sets the [`behavior major version`](crate::config::BehaviorVersion).
+    ///
+    /// Over time, new best-practice behaviors are introduced. However, these behaviors might not be backwards
+    /// compatible. For example, a change which introduces new default timeouts or a new retry-mode for
+    /// all operations might be the ideal behavior but could break existing applications.
+    ///
+    /// # Examples
+    ///
+    /// Set the behavior major version to `latest`. This is equivalent to enabling the `behavior-version-latest` cargo feature.
+    /// ```no_run
+    /// use simple_string::config::BehaviorVersion;
+    ///
+    /// let config = simple_string::Config::builder()
+    ///     .behavior_version(BehaviorVersion::latest())
+    ///     // ...
+    ///     .build();
+    /// let client = simple_string::Client::from_conf(config);
+    /// ```
+    ///
+    /// Customizing behavior major version:
+    /// ```no_run
+    /// use simple_string::config::BehaviorVersion;
+    ///
+    /// let config = simple_string::Config::builder()
+    ///     .behavior_version(BehaviorVersion::v2023_11_09())
+    ///     // ...
+    ///     .build();
+    /// let client = simple_string::Client::from_conf(config);
+    /// ```
+
+    pub fn behavior_version(mut self, behavior_version: crate::config::BehaviorVersion) -> Self {
+        self.set_behavior_version(Some(behavior_version));
+        self
+    }
+
+    /// Sets the [`behavior major version`](crate::config::BehaviorVersion).
+    ///
+    /// Over time, new best-practice behaviors are introduced. However, these behaviors might not be backwards
+    /// compatible. For example, a change which introduces new default timeouts or a new retry-mode for
+    /// all operations might be the ideal behavior but could break existing applications.
+    ///
+    /// # Examples
+    ///
+    /// Set the behavior major version to `latest`. This is equivalent to enabling the `behavior-version-latest` cargo feature.
+    /// ```no_run
+    /// use simple_string::config::BehaviorVersion;
+    ///
+    /// let config = simple_string::Config::builder()
+    ///     .behavior_version(BehaviorVersion::latest())
+    ///     // ...
+    ///     .build();
+    /// let client = simple_string::Client::from_conf(config);
+    /// ```
+    ///
+    /// Customizing behavior major version:
+    /// ```no_run
+    /// use simple_string::config::BehaviorVersion;
+    ///
+    /// let config = simple_string::Config::builder()
+    ///     .behavior_version(BehaviorVersion::v2023_11_09())
+    ///     // ...
+    ///     .build();
+    /// let client = simple_string::Client::from_conf(config);
+    /// ```
+
+    pub fn set_behavior_version(
+        &mut self,
+        behavior_version: Option<crate::config::BehaviorVersion>,
+    ) -> &mut Self {
+        self.behavior_version = behavior_version;
+        self
+    }
+
+    /// Convenience method to set the latest behavior major version
+    ///
+    /// This is equivalent to enabling the `behavior-version-latest` Cargo feature
+    pub fn behavior_version_latest(mut self) -> Self {
+        self.set_behavior_version(Some(crate::config::BehaviorVersion::latest()));
+        self
+    }
+    /// Builds a [`Config`].
+    #[allow(unused_mut)]
+    pub fn build(mut self) -> Config {
+        Config {
+            behavior_version: self.behavior_version,
+        }
+    }
+}
+
+pub use ::aws_smithy_runtime_api::client::behavior_version::BehaviorVersion;
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions.rs
new file mode 100644
index 00000000..25e072d2
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions.rs
@@ -0,0 +1,6 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub mod get_string;
+
+pub mod get_string_known_value;
+
+pub mod get_string_utf8;
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string.rs
new file mode 100644
index 00000000..ed44841a
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string.rs
@@ -0,0 +1,33 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use std::any::Any;
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::get_string::GetStringError,
+) -> ::std::rc::Rc<::simple_string_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error>
+{
+    match value {
+    crate::operation::get_string::GetStringError::Unhandled(unhandled) =>
+      ::std::rc::Rc::new(::simple_string_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error::Opaque { obj: Box::into_raw(Box::new(unhandled) as Box<dyn Any>) })
+  }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        ::simple_string_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error,
+    >,
+) -> crate::operation::get_string::GetStringError {
+    // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+    if matches!(&dafny_value.as_ref(), ::simple_string_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error::CollectionOfErrors { .. }) {
+    let error_message = "TODO: can't get message yet";
+    crate::operation::get_string::GetStringError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
+  } else {
+    crate::operation::get_string::GetStringError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
+  }
+}
+
+pub mod _get_string_input;
+
+pub mod _get_string_output;
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string/_get_string_input.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string/_get_string_input.rs
new file mode 100644
index 00000000..0849a8f2
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string/_get_string_input.rs
@@ -0,0 +1,43 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_string::GetStringInput,
+) -> ::std::rc::Rc<
+    ::simple_string_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringInput,
+> {
+    let dafny_value = match value.value {
+      Some(s) => ::simple_string_dafny::_Wrappers_Compile::Option::Some {
+        value: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&s)
+      },
+      None => ::simple_string_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(::simple_string_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringInput::GetStringInput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_string_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringInput,
+    >,
+) -> crate::operation::get_string::GetStringInput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_string_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+                &dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_string_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_string::GetStringInput { value }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string/_get_string_output.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string/_get_string_output.rs
new file mode 100644
index 00000000..d658997a
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string/_get_string_output.rs
@@ -0,0 +1,41 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_string::GetStringOutput,
+) -> ::std::rc::Rc<
+    ::simple_string_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput,
+> {
+    let dafny_value = match value.value {
+      Some(s) => ::simple_string_dafny::_Wrappers_Compile::Option::Some {
+        value: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&s)
+      },
+      None => ::simple_string_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(::simple_string_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput::GetStringOutput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<::simple_string_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput>,
+) -> crate::operation::get_string::GetStringOutput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_string_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+                &dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_string_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_string::GetStringOutput { value }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_known_value.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_known_value.rs
new file mode 100644
index 00000000..2a70d89f
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_known_value.rs
@@ -0,0 +1,33 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use std::any::Any;
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::get_string_known_value::GetStringKnownValueError,
+) -> ::std::rc::Rc<::simple_string_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error>
+{
+    match value {
+    crate::operation::get_string_known_value::GetStringKnownValueError::Unhandled(unhandled) =>
+      ::std::rc::Rc::new(::simple_string_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error::Opaque { obj: Box::into_raw(Box::new(unhandled) as Box<dyn Any>) })
+  }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        ::simple_string_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error,
+    >,
+) -> crate::operation::get_string_known_value::GetStringKnownValueError {
+    // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+    if matches!(&dafny_value.as_ref(), ::simple_string_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error::CollectionOfErrors { .. }) {
+    let error_message = "TODO: can't get message yet";
+    crate::operation::get_string_known_value::GetStringKnownValueError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
+  } else {
+    crate::operation::get_string_known_value::GetStringKnownValueError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
+  }
+}
+
+pub mod _get_string_known_value_input;
+
+pub mod _get_string_known_value_output;
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_known_value/_get_string_known_value_input.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_known_value/_get_string_known_value_input.rs
new file mode 100644
index 00000000..c3525a32
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_known_value/_get_string_known_value_input.rs
@@ -0,0 +1,43 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_string_known_value::GetStringKnownValueInput,
+) -> ::std::rc::Rc<
+    ::simple_string_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringInput,
+> {
+    let dafny_value = match value.value {
+      Some(s) => ::simple_string_dafny::_Wrappers_Compile::Option::Some {
+        value: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&s)
+      },
+      None => ::simple_string_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(::simple_string_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringInput::GetStringInput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_string_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringInput,
+    >,
+) -> crate::operation::get_string_known_value::GetStringKnownValueInput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_string_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+                &dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_string_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_string_known_value::GetStringKnownValueInput { value }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_known_value/_get_string_known_value_output.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_known_value/_get_string_known_value_output.rs
new file mode 100644
index 00000000..dce554ae
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_known_value/_get_string_known_value_output.rs
@@ -0,0 +1,41 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_string_known_value::GetStringKnownValueOutput,
+) -> ::std::rc::Rc<
+    ::simple_string_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput,
+> {
+    let dafny_value = match value.value {
+      Some(s) => ::simple_string_dafny::_Wrappers_Compile::Option::Some {
+        value: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&s)
+      },
+      None => ::simple_string_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(::simple_string_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput::GetStringOutput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<::simple_string_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput>,
+) -> crate::operation::get_string_known_value::GetStringKnownValueOutput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_string_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+                &dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_string_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_string_known_value::GetStringKnownValueOutput { value }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_utf8.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_utf8.rs
new file mode 100644
index 00000000..db5ecd27
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_utf8.rs
@@ -0,0 +1,33 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use std::any::Any;
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::get_string_utf8::GetStringUTF8Error,
+) -> ::std::rc::Rc<::simple_string_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error>
+{
+    match value {
+    crate::operation::get_string_utf8::GetStringUTF8Error::Unhandled(unhandled) =>
+      ::std::rc::Rc::new(::simple_string_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error::Opaque { obj: Box::into_raw(Box::new(unhandled) as Box<dyn Any>) })
+  }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        ::simple_string_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error,
+    >,
+) -> crate::operation::get_string_utf8::GetStringUTF8Error {
+    // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+    if matches!(&dafny_value.as_ref(), ::simple_string_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error::CollectionOfErrors { .. }) {
+    let error_message = "TODO: can't get message yet";
+    crate::operation::get_string_utf8::GetStringUTF8Error::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
+  } else {
+    crate::operation::get_string_utf8::GetStringUTF8Error::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
+  }
+}
+
+pub mod _get_string_utf8_input;
+
+pub mod _get_string_utf8_output;
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_utf8/_get_string_utf8_input.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_utf8/_get_string_utf8_input.rs
new file mode 100644
index 00000000..85d17041
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_utf8/_get_string_utf8_input.rs
@@ -0,0 +1,43 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_string_utf8::GetStringUTF8Input,
+) -> ::std::rc::Rc<
+    ::simple_string_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringInput,
+> {
+    let dafny_value = match value.value {
+      Some(s) => ::simple_string_dafny::_Wrappers_Compile::Option::Some {
+        value: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&s)
+      },
+      None => ::simple_string_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(::simple_string_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringInput::GetStringInput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_string_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringInput,
+    >,
+) -> crate::operation::get_string_utf8::GetStringUTF8Input {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_string_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+                &dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_string_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_string_utf8::GetStringUTF8Input { value }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_utf8/_get_string_utf8_output.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_utf8/_get_string_utf8_output.rs
new file mode 100644
index 00000000..fc10faa6
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_utf8/_get_string_utf8_output.rs
@@ -0,0 +1,41 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_string_utf8::GetStringUTF8Output,
+) -> ::std::rc::Rc<
+    ::simple_string_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput,
+> {
+    let dafny_value = match value.value {
+      Some(s) => ::simple_string_dafny::_Wrappers_Compile::Option::Some {
+        value: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&s)
+      },
+      None => ::simple_string_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(::simple_string_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput::GetStringOutput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<::simple_string_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput>,
+) -> crate::operation::get_string_utf8::GetStringUTF8Output {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_string_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+                &dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_string_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_string_utf8::GetStringUTF8Output { value }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/error.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/error.rs
new file mode 100644
index 00000000..ec89cbec
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/error.rs
@@ -0,0 +1,14 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use ::aws_smithy_runtime_api::box_error::BoxError;
+
+/// Error type returned by the client.
+pub type SdkError<E, R = ::aws_smithy_runtime_api::client::orchestrator::HttpResponse> =
+    ::aws_smithy_runtime_api::client::result::SdkError<E, R>;
+pub use ::aws_smithy_runtime_api::client::result::ConnectorError;
+pub use ::aws_smithy_types::error::operation::BuildError;
+
+pub use ::aws_smithy_types::error::display::DisplayErrorContext;
+pub use ::aws_smithy_types::error::metadata::ErrorMetadata;
+pub use ::aws_smithy_types::error::metadata::ProvideErrorMetadata;
+
+pub(crate) mod sealed_unhandled;
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/error/sealed_unhandled.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/error/sealed_unhandled.rs
new file mode 100644
index 00000000..9d21fbd6
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/error/sealed_unhandled.rs
@@ -0,0 +1,22 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// This struct is not intended to be used.
+///
+/// This struct holds information about an unhandled error,
+/// but that information should be obtained by using the
+/// [`ProvideErrorMetadata`](::aws_smithy_types::error::metadata::ProvideErrorMetadata) trait
+/// on the error type.
+///
+/// This struct intentionally doesn't yield any useful information itself.
+#[deprecated(
+    note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+variable wildcard pattern and check `.code()`:
+ \
+&nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+ \
+See [`ProvideErrorMetadata`](::aws_smithy_types::error::metadata::ProvideErrorMetadata) for what information is available for the error."
+)]
+#[derive(Debug)]
+pub struct Unhandled {
+    pub(crate) source: ::aws_smithy_runtime_api::box_error::BoxError,
+    pub(crate) meta: ::aws_smithy_types::error::metadata::ErrorMetadata,
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/lib.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/lib.rs
new file mode 100644
index 00000000..0c773808
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/lib.rs
@@ -0,0 +1,21 @@
+#![allow(deprecated)]
+
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[doc(inline)]
+pub use config::Config;
+
+pub mod client;
+
+/// Configuration for SimpleString Service.
+pub mod config;
+
+/// Common errors and error handling utilities.
+pub mod error;
+
+/// All operations that this crate can perform.
+pub mod operation;
+
+mod conversions;
+
+pub use client::Client;
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation.rs
new file mode 100644
index 00000000..af6d5f9c
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation.rs
@@ -0,0 +1,10 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+/// Types for the `GetString` operation.
+pub mod get_string;
+
+/// Types for the `GetStringKnownValue` operation.
+pub mod get_string_known_value;
+
+/// Types for the `GetStringUTF8` operation.
+pub mod get_string_utf8;
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string.rs
new file mode 100644
index 00000000..f369da68
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string.rs
@@ -0,0 +1,145 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `GetString`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct GetString;
+impl GetString {
+    /// Creates a new `GetString`
+    pub fn new() -> Self {
+        Self
+    }
+    pub(crate) async fn send(
+        handle: &crate::client::Handle,
+        input: crate::operation::get_string::GetStringInput,
+    ) -> ::std::result::Result<
+        crate::operation::get_string::GetStringOutput,
+        crate::operation::get_string::GetStringError,
+    > {
+        let inner_input = crate::conversions::get_string::_get_string_input::to_dafny(input);
+        let inner_result =
+            ::simple_string_dafny::dafny_runtime::read!(handle.inner).GetString(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            ::simple_string_dafny::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(
+                crate::conversions::get_string::_get_string_output::from_dafny(
+                    inner_result.value().clone(),
+                ),
+            )
+        } else {
+            Err(crate::conversions::get_string::from_dafny_error(
+                inner_result.error().clone(),
+            ))
+        }
+    }
+}
+
+/// Error type for the `GetString` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum GetStringError {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-GetStringError) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl GetStringError {
+    /// Creates the `GetStringError::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Creates the `GetStringError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for GetStringError {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for GetStringError {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for GetStringError {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for GetStringError {
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError for GetStringError {
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::get_string::_get_string_output::GetStringOutput;
+
+pub use crate::operation::get_string::_get_string_input::GetStringInput;
+
+mod _get_string_input;
+
+mod _get_string_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string/_get_string_input.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string/_get_string_input.rs
new file mode 100644
index 00000000..66233da4
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string/_get_string_input.rs
@@ -0,0 +1,56 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetStringInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<::std::string::String>,
+}
+impl GetStringInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn message(&self) -> ::std::option::Option<&str> {
+        self.value.as_deref()
+    }
+}
+impl GetStringInput {
+    /// Creates a new builder-style object to manufacture [`GetStringInput`](crate::operation::operation::GetStringInput).
+    pub fn builder() -> crate::operation::get_string::builders::GetStringInputBuilder {
+        crate::operation::get_string::builders::GetStringInputBuilder::default()
+    }
+}
+
+/// A builder for [`GetStringInput`](crate::operation::operation::GetStringInput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetStringInputBuilder {
+    pub(crate) value: ::std::option::Option<::std::string::String>,
+}
+impl GetStringInputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetStringInput`](crate::operation::operation::GetStringInput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_string::GetStringInput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(crate::operation::get_string::GetStringInput {
+            value: self.value,
+        })
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string/_get_string_output.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string/_get_string_output.rs
new file mode 100644
index 00000000..ab6b1fa3
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string/_get_string_output.rs
@@ -0,0 +1,56 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetStringOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<::std::string::String>,
+}
+impl GetStringOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<&str> {
+        self.value.as_deref()
+    }
+}
+impl GetStringOutput {
+    /// Creates a new builder-style object to manufacture [`GetStringOutput`](crate::operation::operation::GetStringOutput).
+    pub fn builder() -> crate::operation::get_string::builders::GetStringOutputBuilder {
+        crate::operation::get_string::builders::GetStringOutputBuilder::default()
+    }
+}
+
+/// A builder for [`GetStringOutput`](crate::operation::operation::GetStringOutput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetStringOutputBuilder {
+    pub(crate) value: ::std::option::Option<::std::string::String>,
+}
+impl GetStringOutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetStringOutput`](crate::operation::operation::GetStringOutput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_string::GetStringOutput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(crate::operation::get_string::GetStringOutput {
+            value: self.value,
+        })
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string/builders.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string/builders.rs
new file mode 100644
index 00000000..6db3795e
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string/builders.rs
@@ -0,0 +1,89 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::get_string::_get_string_output::GetStringOutputBuilder;
+
+pub use crate::operation::get_string::_get_string_input::GetStringInputBuilder;
+
+impl GetStringInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::get_string::GetStringOutput,
+        crate::operation::get_string::GetStringError,
+    > {
+        let mut fluent_builder = client.get_string();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+/// Fluent builder constructing a request to `GetString`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct GetStringFluentBuilder {
+    handle: ::std::sync::Arc<crate::client::Handle>,
+    inner: crate::operation::get_string::builders::GetStringInputBuilder,
+    config_override: ::std::option::Option<crate::config::Builder>,
+}
+impl GetStringFluentBuilder {
+    /// Creates a new `GetString`.
+    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
+        Self {
+            handle,
+            inner: ::std::default::Default::default(),
+            config_override: ::std::option::Option::None,
+        }
+    }
+    /// Access the GetString as a reference.
+    pub fn as_input(&self) -> &crate::operation::get_string::builders::GetStringInputBuilder {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_string::GetStringOutput,
+        crate::operation::get_string::GetStringError,
+    > {
+        let input = self
+            .inner
+            .build()
+            // Using unhandled since GetString doesn't declare any validation,
+            // and smithy-rs seems to not generate a ValidationError case unless there is
+            // (but isn't that a backwards compatibility problem for output structures?)
+            // Vanilla smithy-rs uses SdkError::construction_failure,
+            // but we aren't using SdkError.
+            .map_err(crate::operation::get_string::GetStringError::unhandled)?;
+        crate::operation::get_string::GetString::send(&self.handle, input).await
+    }
+
+    pub(crate) fn config_override(
+        mut self,
+        config_override: impl Into<crate::config::Builder>,
+    ) -> Self {
+        self.set_config_override(Some(config_override.into()));
+        self
+    }
+
+    pub(crate) fn set_config_override(
+        &mut self,
+        config_override: Option<crate::config::Builder>,
+    ) -> &mut Self {
+        self.config_override = config_override;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.inner = self.inner.value(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.inner = self.inner.set_value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        self.inner.get_value()
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_known_value.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_known_value.rs
new file mode 100644
index 00000000..c3276c35
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_known_value.rs
@@ -0,0 +1,146 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `GetStringKnownValue`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct GetStringKnownValue;
+impl GetStringKnownValue {
+    /// Creates a new `GetStringKnownValue`
+    pub fn new() -> Self {
+        Self
+    }
+    pub(crate) async fn send(
+        handle: &crate::client::Handle,
+        input: crate::operation::get_string_known_value::GetStringKnownValueInput,
+    ) -> ::std::result::Result<
+        crate::operation::get_string_known_value::GetStringKnownValueOutput,
+        crate::operation::get_string_known_value::GetStringKnownValueError,
+    > {
+        let inner_input =
+            crate::conversions::get_string_known_value::_get_string_known_value_input::to_dafny(
+                input,
+            );
+        let inner_result =
+            ::simple_string_dafny::dafny_runtime::read!(handle.inner).GetStringUTF8(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            ::simple_string_dafny::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(crate::conversions::get_string_known_value::_get_string_known_value_output::from_dafny(inner_result.value().clone()))
+        } else {
+            Err(
+                crate::conversions::get_string_known_value::from_dafny_error(
+                    inner_result.error().clone(),
+                ),
+            )
+        }
+    }
+}
+
+/// Error type for the `GetStringKnownValue` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum GetStringKnownValueError {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-GetStringKnownValueError) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl GetStringKnownValueError {
+    /// Creates the `GetStringKnownValueError::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Creates the `GetStringKnownValueError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for GetStringKnownValueError {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for GetStringKnownValueError {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for GetStringKnownValueError {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for GetStringKnownValueError {
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError for GetStringKnownValueError {
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::get_string_known_value::_get_string_known_value_output::GetStringKnownValueOutput;
+
+pub use crate::operation::get_string_known_value::_get_string_known_value_input::GetStringKnownValueInput;
+
+mod _get_string_known_value_input;
+
+mod _get_string_known_value_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_known_value/_get_string_known_value_input.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_known_value/_get_string_known_value_input.rs
new file mode 100644
index 00000000..b67c3eff
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_known_value/_get_string_known_value_input.rs
@@ -0,0 +1,60 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetStringKnownValueInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<::std::string::String>,
+}
+impl GetStringKnownValueInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<&str> {
+        self.value.as_deref()
+    }
+}
+impl GetStringKnownValueInput {
+    /// Creates a new builder-style object to manufacture [`GetStringKnownValueInput`](crate::operation::operation::GetStringKnownValueInput).
+    pub fn builder(
+    ) -> crate::operation::get_string_known_value::builders::GetStringKnownValueInputBuilder {
+        crate::operation::get_string_known_value::builders::GetStringKnownValueInputBuilder::default(
+        )
+    }
+}
+
+/// A builder for [`GetStringKnownValueInput`](crate::operation::operation::GetStringKnownValueInput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetStringKnownValueInputBuilder {
+    pub(crate) value: ::std::option::Option<::std::string::String>,
+}
+impl GetStringKnownValueInputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetStringKnownValueInput`](crate::operation::operation::GetStringKnownValueInput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_string_known_value::GetStringKnownValueInput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(
+            crate::operation::get_string_known_value::GetStringKnownValueInput {
+                value: self.value,
+            },
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_known_value/_get_string_known_value_output.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_known_value/_get_string_known_value_output.rs
new file mode 100644
index 00000000..291e692c
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_known_value/_get_string_known_value_output.rs
@@ -0,0 +1,59 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetStringKnownValueOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<::std::string::String>,
+}
+impl GetStringKnownValueOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<&str> {
+        self.value.as_deref()
+    }
+}
+impl GetStringKnownValueOutput {
+    /// Creates a new builder-style object to manufacture [`GetStringKnownValueOutput`](crate::operation::operation::GetStringKnownValueOutput).
+    pub fn builder(
+    ) -> crate::operation::get_string_known_value::builders::GetStringKnownValueOutputBuilder {
+        crate::operation::get_string_known_value::builders::GetStringKnownValueOutputBuilder::default()
+    }
+}
+
+/// A builder for [`GetStringKnownValueOutput`](crate::operation::operation::GetStringKnownValueOutput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetStringKnownValueOutputBuilder {
+    pub(crate) value: ::std::option::Option<::std::string::String>,
+}
+impl GetStringKnownValueOutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetStringKnownValueOutput`](crate::operation::operation::GetStringKnownValueOutput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_string_known_value::GetStringKnownValueOutput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(
+            crate::operation::get_string_known_value::GetStringKnownValueOutput {
+                value: self.value,
+            },
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_known_value/builders.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_known_value/builders.rs
new file mode 100644
index 00000000..ddd6dbfb
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_known_value/builders.rs
@@ -0,0 +1,94 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::get_string_known_value::_get_string_known_value_output::GetStringKnownValueOutputBuilder;
+
+pub use crate::operation::get_string_known_value::_get_string_known_value_input::GetStringKnownValueInputBuilder;
+
+impl GetStringKnownValueInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::get_string_known_value::GetStringKnownValueOutput,
+        crate::operation::get_string_known_value::GetStringKnownValueError,
+    > {
+        let mut fluent_builder = client.get_string_known_value();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+/// Fluent builder constructing a request to `GetStringKnownValue`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct GetStringKnownValueFluentBuilder {
+    handle: ::std::sync::Arc<crate::client::Handle>,
+    inner: crate::operation::get_string_known_value::builders::GetStringKnownValueInputBuilder,
+    config_override: ::std::option::Option<crate::config::Builder>,
+}
+impl GetStringKnownValueFluentBuilder {
+    /// Creates a new `GetStringKnownValue`.
+    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
+        Self {
+            handle,
+            inner: ::std::default::Default::default(),
+            config_override: ::std::option::Option::None,
+        }
+    }
+    /// Access the GetStringKnownValue as a reference.
+    pub fn as_input(
+        &self,
+    ) -> &crate::operation::get_string_known_value::builders::GetStringKnownValueInputBuilder {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_string_known_value::GetStringKnownValueOutput,
+        crate::operation::get_string_known_value::GetStringKnownValueError,
+    > {
+        let input = self
+            .inner
+            .build()
+            // Using unhandled since GetString doesn't declare any validation,
+            // and smithy-rs seems to not generate a ValidationError case unless there is
+            // (but isn't that a backwards compatibility problem for output structures?)
+            // Vanilla smithy-rs uses SdkError::construction_failure,
+            // but we aren't using SdkError.
+            .map_err(
+                crate::operation::get_string_known_value::GetStringKnownValueError::unhandled,
+            )?;
+        crate::operation::get_string_known_value::GetStringKnownValue::send(&self.handle, input)
+            .await
+    }
+
+    pub(crate) fn config_override(
+        mut self,
+        config_override: impl Into<crate::config::Builder>,
+    ) -> Self {
+        self.set_config_override(Some(config_override.into()));
+        self
+    }
+
+    pub(crate) fn set_config_override(
+        &mut self,
+        config_override: Option<crate::config::Builder>,
+    ) -> &mut Self {
+        self.config_override = config_override;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.inner = self.inner.value(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.inner = self.inner.set_value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        self.inner.get_value()
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_utf8.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_utf8.rs
new file mode 100644
index 00000000..a8d2a18d
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_utf8.rs
@@ -0,0 +1,146 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `GetStringUTF8`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct GetStringUTF8;
+impl GetStringUTF8 {
+    /// Creates a new `GetStringUTF8`
+    pub fn new() -> Self {
+        Self
+    }
+    pub(crate) async fn send(
+        handle: &crate::client::Handle,
+        input: crate::operation::get_string_utf8::GetStringUTF8Input,
+    ) -> ::std::result::Result<
+        crate::operation::get_string_utf8::GetStringUTF8Output,
+        crate::operation::get_string_utf8::GetStringUTF8Error,
+    > {
+        let inner_input =
+            crate::conversions::get_string_utf8::_get_string_utf8_input::to_dafny(input);
+        let inner_result =
+            ::simple_string_dafny::dafny_runtime::read!(handle.inner).GetStringUTF8(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            ::simple_string_dafny::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(
+                crate::conversions::get_string_utf8::_get_string_utf8_output::from_dafny(
+                    inner_result.value().clone(),
+                ),
+            )
+        } else {
+            Err(crate::conversions::get_string_utf8::from_dafny_error(
+                inner_result.error().clone(),
+            ))
+        }
+    }
+}
+
+/// Error type for the `GetStringUTF8` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum GetStringUTF8Error {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-GetStringUTF8Error) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl GetStringUTF8Error {
+    /// Creates the `GetStringUTF8Error::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Creates the `GetStringUTF8Error::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for GetStringUTF8Error {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for GetStringUTF8Error {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for GetStringUTF8Error {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for GetStringUTF8Error {
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError for GetStringUTF8Error {
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::get_string_utf8::_get_string_utf8_output::GetStringUTF8Output;
+
+pub use crate::operation::get_string_utf8::_get_string_utf8_input::GetStringUTF8Input;
+
+mod _get_string_utf8_input;
+
+mod _get_string_utf8_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_utf8/_get_string_utf8_input.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_utf8/_get_string_utf8_input.rs
new file mode 100644
index 00000000..a448688e
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_utf8/_get_string_utf8_input.rs
@@ -0,0 +1,56 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetStringUTF8Input {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<::std::string::String>,
+}
+impl GetStringUTF8Input {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<&str> {
+        self.value.as_deref()
+    }
+}
+impl GetStringUTF8Input {
+    /// Creates a new builder-style object to manufacture [`GetStringUTF8Input`](crate::operation::operation::GetStringUTF8Input).
+    pub fn builder() -> crate::operation::get_string_utf8::builders::GetStringUTF8InputBuilder {
+        crate::operation::get_string_utf8::builders::GetStringUTF8InputBuilder::default()
+    }
+}
+
+/// A builder for [`GetStringUTF8Input`](crate::operation::operation::GetStringUTF8Input).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetStringUTF8InputBuilder {
+    pub(crate) value: ::std::option::Option<::std::string::String>,
+}
+impl GetStringUTF8InputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetStringUTF8Input`](crate::operation::operation::GetStringUTF8Input).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_string_utf8::GetStringUTF8Input,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(crate::operation::get_string_utf8::GetStringUTF8Input {
+            value: self.value,
+        })
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_utf8/_get_string_utf8_output.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_utf8/_get_string_utf8_output.rs
new file mode 100644
index 00000000..2c8dca6a
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_utf8/_get_string_utf8_output.rs
@@ -0,0 +1,56 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetStringUTF8Output {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<::std::string::String>,
+}
+impl GetStringUTF8Output {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<&str> {
+        self.value.as_deref()
+    }
+}
+impl GetStringUTF8Output {
+    /// Creates a new builder-style object to manufacture [`GetStringUTF8Output`](crate::operation::operation::GetStringUTF8Output).
+    pub fn builder() -> crate::operation::get_string_utf8::builders::GetStringUTF8OutputBuilder {
+        crate::operation::get_string_utf8::builders::GetStringUTF8OutputBuilder::default()
+    }
+}
+
+/// A builder for [`GetStringUTF8Output`](crate::operation::operation::GetStringUTF8Output).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetStringUTF8OutputBuilder {
+    pub(crate) value: ::std::option::Option<::std::string::String>,
+}
+impl GetStringUTF8OutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetStringUTF8Output`](crate::operation::operation::GetStringUTF8Output).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_string_utf8::GetStringUTF8Output,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(crate::operation::get_string_utf8::GetStringUTF8Output {
+            value: self.value,
+        })
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_utf8/builders.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_utf8/builders.rs
new file mode 100644
index 00000000..f27b7882
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_utf8/builders.rs
@@ -0,0 +1,91 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::get_string_utf8::_get_string_utf8_output::GetStringUTF8OutputBuilder;
+
+pub use crate::operation::get_string_utf8::_get_string_utf8_input::GetStringUTF8InputBuilder;
+
+impl GetStringUTF8InputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::get_string_utf8::GetStringUTF8Output,
+        crate::operation::get_string_utf8::GetStringUTF8Error,
+    > {
+        let mut fluent_builder = client.get_string_utf8();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+/// Fluent builder constructing a request to `GetStringUTF8`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct GetStringUTF8FluentBuilder {
+    handle: ::std::sync::Arc<crate::client::Handle>,
+    inner: crate::operation::get_string_utf8::builders::GetStringUTF8InputBuilder,
+    config_override: ::std::option::Option<crate::config::Builder>,
+}
+impl GetStringUTF8FluentBuilder {
+    /// Creates a new `GetStringUTF8`.
+    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
+        Self {
+            handle,
+            inner: ::std::default::Default::default(),
+            config_override: ::std::option::Option::None,
+        }
+    }
+    /// Access the GetStringUTF8 as a reference.
+    pub fn as_input(
+        &self,
+    ) -> &crate::operation::get_string_utf8::builders::GetStringUTF8InputBuilder {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_string_utf8::GetStringUTF8Output,
+        crate::operation::get_string_utf8::GetStringUTF8Error,
+    > {
+        let input = self
+            .inner
+            .build()
+            // Using unhandled since GetString doesn't declare any validation,
+            // and smithy-rs seems to not generate a ValidationError case unless there is
+            // (but isn't that a backwards compatibility problem for output structures?)
+            // Vanilla smithy-rs uses SdkError::construction_failure,
+            // but we aren't using SdkError.
+            .map_err(crate::operation::get_string_utf8::GetStringUTF8Error::unhandled)?;
+        crate::operation::get_string_utf8::GetStringUTF8::send(&self.handle, input).await
+    }
+
+    pub(crate) fn config_override(
+        mut self,
+        config_override: impl Into<crate::config::Builder>,
+    ) -> Self {
+        self.set_config_override(Some(config_override.into()));
+        self
+    }
+
+    pub(crate) fn set_config_override(
+        &mut self,
+        config_override: Option<crate::config::Builder>,
+    ) -> &mut Self {
+        self.config_override = config_override;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.inner = self.inner.value(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.inner = self.inner.set_value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        self.inner.get_value()
+    }
+}
