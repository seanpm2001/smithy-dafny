diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/dafny_impl/src/implementation_from_dafny.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/dafny_impl/src/implementation_from_dafny.rs
index b2f40300..8aa39b59 100644
--- b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/dafny_impl/src/implementation_from_dafny.rs
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/dafny_impl/src/implementation_from_dafny.rs
@@ -1,114 +1,549 @@
 #![allow(warnings, unconditional_panic)]
-extern crate dafny_runtime;
-mod r#_System {
-#[derive(Clone, PartialEq)]
-#[repr(transparent)]
-pub struct r#nat(pub ::dafny_runtime::BigInt);
-impl  ::dafny_runtime::DafnyErasable for r#nat {
-type Erased = ::dafny_runtime::BigInt;
-}
-impl  ::dafny_runtime::DafnyUnerasable<::dafny_runtime::BigInt> for r#nat {}
-impl  ::dafny_runtime::DafnyUnerasable<r#nat> for r#nat {}
-impl  ::std::default::Default for r#nat {
-fn default() -> Self {
-r#nat(::std::default::Default::default())
-}
-}
-impl  ::dafny_runtime::DafnyPrint for r#nat {
-fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, in_seq: bool) -> ::std::fmt::Result {
-::dafny_runtime::DafnyPrint::fmt_print(&self.0, __fmt_print_formatter, in_seq)
-}
-}
-impl  ::std::ops::Deref for r#nat {
-type Target = ::dafny_runtime::BigInt;
-fn deref(&self) -> &Self::Target {
-&self.0
-}
-}
+#![allow(nonstandard_style)]
+pub use dafny_runtime;
+pub use dafny_standard_library;
+pub use dafny_standard_library::implementation_from_dafny::*;
 
-#[derive(PartialEq)]
-pub enum r#Tuple2<r#T0, r#T1, > {
-r#___hMake2 { r#_0: r#T0, r#_1: r#T1, },
-_PhantomVariant(::std::marker::PhantomData::<r#T0>, ::std::marker::PhantomData::<r#T1>)
-}
-impl <r#T0: ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<r#T0> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default + 'static, r#T1: ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<r#T1> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default + 'static, > r#Tuple2<r#T0, r#T1, > where <r#T0 as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq, <r#T1 as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq,  {
-pub fn r#_0(&self) -> &r#T0 {
-match self {
-r#Tuple2::r#___hMake2 { r#_0, r#_1, } => r#_0,
-r#Tuple2::_PhantomVariant(..) => panic!(),
-}
-}
-pub fn r#_1(&self) -> &r#T1 {
-match self {
-r#Tuple2::r#___hMake2 { r#_0, r#_1, } => r#_1,
-r#Tuple2::_PhantomVariant(..) => panic!(),
-}
-}
+pub mod r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes {
+    /* datatype DafnyCallEvent<I, O> = DafnyCallEvent(input: I, output: O) */
+    #[derive(Clone)]
+    pub struct DafnyCallEvent<I: ::dafny_runtime::DafnyType, O: ::dafny_runtime::DafnyType> {
+        input: I,
+        output: O,
+    }
+    impl<I: ::dafny_runtime::DafnyType, O: ::dafny_runtime::DafnyType> ::core::fmt::Debug
+        for DafnyCallEvent<I, O>
+    {
+        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
+            f.debug_struct("DafnyCallEvent")
+                .field("input", &self.input)
+                .field("output", &self.output)
+                .finish()
+        }
+    }
+    impl<I: ::dafny_runtime::DafnyType, O: ::dafny_runtime::DafnyType> ::dafny_runtime::DafnyPrint
+        for DafnyCallEvent<I, O>
+    {
+        fn fmt_print(&self, f: &mut std::fmt::Formatter<'_>, in_seq: bool) -> std::fmt::Result {
+            write!(
+                f,
+                "simple.types.smithyblob.internaldafny.types.DafnyCallEvent("
+            )?;
+            self.input.fmt_print(f, false)?;
+            write!(f, ",")?;
+            self.output.fmt_print(f, false)?;
+            write!(f, ")")
+        }
+    }
+    impl<I: ::dafny_runtime::DafnyTypeEq, O: ::dafny_runtime::DafnyTypeEq>
+        PartialEq<DafnyCallEvent<I, O>> for DafnyCallEvent<I, O>
+    {
+        fn eq(&self, other: &DafnyCallEvent<I, O>) -> bool {
+            self.input == other.input && self.output == other.output
+        }
+    }
+    impl<I: ::dafny_runtime::DafnyTypeEq, O: ::dafny_runtime::DafnyTypeEq> Eq for DafnyCallEvent<I, O> {}
+    impl<I: ::dafny_runtime::DafnyTypeEq, O: ::dafny_runtime::DafnyTypeEq> ::core::hash::Hash
+        for DafnyCallEvent<I, O>
+    {
+        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
+            self.input.hash(state);
+            self.output.hash(state);
+        }
+    }
 
-}
-impl <r#T0: ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<r#T0> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default + 'static, r#T1: ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<r#T1> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default + 'static, > ::dafny_runtime::DafnyErasable for r#Tuple2<r#T0, r#T1, > {
-type Erased = r#Tuple2<r#T0::Erased, r#T1::Erased, >;
-}
-impl <r#T0__Erased, r#T0: ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<r#T0> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default + ::dafny_runtime::DafnyUnerasable<r#T0__Erased> + 'static, r#T1__Erased, r#T1: ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<r#T1> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default + ::dafny_runtime::DafnyUnerasable<r#T1__Erased> + 'static, > ::dafny_runtime::DafnyUnerasable<r#Tuple2<r#T0__Erased, r#T1__Erased, >> for r#Tuple2<r#T0, r#T1, > {}
-
-impl <r#T0: ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<r#T0> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default + 'static, r#T1: ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<r#T1> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default + 'static, > ::dafny_runtime::DafnyPrint for r#Tuple2<r#T0, r#T1, > {
-fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {
-match self {
-r#Tuple2::r#___hMake2 { r#_0, r#_1, } => {
-write!(__fmt_print_formatter, "_System.Tuple2.___hMake2(")?;
-::dafny_runtime::DafnyPrint::fmt_print(r#_0, __fmt_print_formatter, false)?;
-write!(__fmt_print_formatter, ", ")?;
-::dafny_runtime::DafnyPrint::fmt_print(r#_1, __fmt_print_formatter, false)?;
-write!(__fmt_print_formatter, ")")?;
-Ok(())
-}
-r#Tuple2::_PhantomVariant(..) => {panic!()
-}
-}
-}
-}
+    /*
+     datatype GetBlobInput = | GetBlobInput (
+      nameonly value: Option<blob> := Option.None
+    )
+    */
+    #[derive(Clone)]
+    pub enum GetBlobInput {
+        GetBlobInput {
+            value: ::std::rc::Rc<
+                super::r#_Wrappers_Compile::Option<::dafny_runtime::Sequence<::std::primitive::u8>>,
+            >,
+        },
+    }
+    impl ::std::convert::AsRef<GetBlobInput> for &GetBlobInput {
+        fn as_ref(&self) -> Self {
+            self
+        }
+    }
+    impl GetBlobInput {
+        pub fn value(
+            &self,
+        ) -> ::std::rc::Rc<
+            super::r#_Wrappers_Compile::Option<::dafny_runtime::Sequence<::std::primitive::u8>>,
+        > {
+            match self {
+                GetBlobInput::GetBlobInput { value } => value.clone(),
+            }
+        }
+    }
+    impl ::core::fmt::Debug for GetBlobInput {
+        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
+            ::dafny_runtime::DafnyPrint::fmt_print(self, f, false)
+        }
+    }
+    impl ::dafny_runtime::DafnyPrint for GetBlobInput {
+        fn fmt_print(&self, f: &mut std::fmt::Formatter<'_>, in_seq: bool) -> std::fmt::Result {
+            write!(
+                f,
+                "simple.types.smithyblob.internaldafny.types.GetBlobInput(value := "
+            )?;
+            self.value().fmt_print(f, false)?;
+            write!(f, ")")
+        }
+    }
+    impl PartialEq<GetBlobInput> for GetBlobInput {
+        fn eq(&self, other: &GetBlobInput) -> bool {
+            self.value() == other.value()
+        }
+    }
+    impl Eq for GetBlobInput {}
+    impl ::core::hash::Hash for GetBlobInput {
+        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
+            self.value().hash(state);
+        }
+    }
 
-impl <r#T0: ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<r#T0> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default + 'static, r#T1: ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<r#T1> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default + 'static, > ::std::default::Default for r#Tuple2<r#T0, r#T1, > {
-fn default() -> Self {
-r#Tuple2::r#___hMake2 {
-r#_0: ::std::default::Default::default(),
-r#_1: ::std::default::Default::default(),
-}
-}
-}
+    /*
+    datatype GetBlobOutput = | GetBlobOutput (
+    nameonly value: Option<blob> := Option.None
+    ) */
+    #[derive(Clone)]
+    pub enum GetBlobOutput {
+        GetBlobOutput {
+            value: ::std::rc::Rc<
+                super::r#_Wrappers_Compile::Option<::dafny_runtime::Sequence<::std::primitive::u8>>,
+            >,
+        },
+    }
+    impl GetBlobOutput {
+        pub fn value(
+            &self,
+        ) -> ::std::rc::Rc<
+            super::r#_Wrappers_Compile::Option<::dafny_runtime::Sequence<::std::primitive::u8>>,
+        > {
+            match self {
+                GetBlobOutput::GetBlobOutput { value } => value.clone(),
+            }
+        }
+    }
+    impl ::std::convert::AsRef<GetBlobOutput> for &GetBlobOutput {
+        fn as_ref(&self) -> Self {
+            self
+        }
+    }
+    impl ::core::fmt::Debug for GetBlobOutput {
+        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
+            ::dafny_runtime::DafnyPrint::fmt_print(self, f, false)
+        }
+    }
+    impl ::dafny_runtime::DafnyPrint for GetBlobOutput {
+        fn fmt_print(&self, f: &mut std::fmt::Formatter<'_>, in_seq: bool) -> std::fmt::Result {
+            write!(
+                f,
+                "simple.types.smithyblob.internaldafny.types.GetBlobOutput(value := "
+            )?;
+            self.value().fmt_print(f, false)?;
+            write!(f, ")")
+        }
+    }
+    impl PartialEq<GetBlobOutput> for GetBlobOutput {
+        fn eq(&self, other: &GetBlobOutput) -> bool {
+            self.value() == other.value()
+        }
+    }
+    impl Eq for GetBlobOutput {}
+    impl ::core::hash::Hash for GetBlobOutput {
+        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
+            self.value().hash(state);
+        }
+    }
 
-#[derive(PartialEq)]
-pub enum r#Tuple0 {
-r#___hMake0 { },
+    /*
+    datatype SimpleBlobConfig = | SimpleBlobConfig (
+    ) */
+    #[derive(Clone)]
+    pub enum SimpleBlobConfig {
+        SimpleBlobConfig {},
+    }
 
-}
-impl  r#Tuple0 {
+    impl ::std::convert::AsRef<SimpleBlobConfig> for &SimpleBlobConfig {
+        fn as_ref(&self) -> Self {
+            self
+        }
+    }
 
-}
-impl  ::dafny_runtime::DafnyErasable for r#Tuple0 {
-type Erased = r#Tuple0;
-}
-impl  ::dafny_runtime::DafnyUnerasable<r#Tuple0> for r#Tuple0 {}
-
-impl  ::dafny_runtime::DafnyPrint for r#Tuple0 {
-fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {
-match self {
-r#Tuple0::r#___hMake0 { } => {
-write!(__fmt_print_formatter, "_System.Tuple0.___hMake0")?;
-Ok(())
-}
-}
-}
-}
+    impl ::core::fmt::Debug for SimpleBlobConfig {
+        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
+            f.debug_struct("SimpleBlobConfig").finish()
+        }
+    }
 
-impl  ::std::default::Default for r#Tuple0 {
-fn default() -> Self {
-r#Tuple0::r#___hMake0 {
-}
-}
+    impl ::dafny_runtime::DafnyPrint for SimpleBlobConfig {
+        fn fmt_print(&self, f: &mut std::fmt::Formatter<'_>, in_seq: bool) -> std::fmt::Result {
+            write!(
+                f,
+                "simple.types.smithyblob.internaldafny.types.SimpleBlobConfig()"
+            )
+        }
+    }
+    impl PartialEq<SimpleBlobConfig> for SimpleBlobConfig {
+        fn eq(&self, other: &SimpleBlobConfig) -> bool {
+            true
+        }
+    }
+    impl Eq for SimpleBlobConfig {}
+
+    impl ::core::hash::Hash for SimpleBlobConfig {
+        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {}
+    }
+
+    pub struct ISimpleTypesBlobClientCallHistory {}
+    impl ISimpleTypesBlobClientCallHistory {
+        fn ctor(this: *mut ISimpleTypesBlobClientCallHistory) {}
+    }
+    pub trait ISimpleTypesBlobClient {
+        fn GetBlob(
+            self: &Self,
+            input: &::std::rc::Rc<
+                super::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::GetBlobInput,
+            >,
+        ) -> ::std::rc::Rc<
+            super::r#_Wrappers_Compile::Result<
+                ::std::rc::Rc<
+                    super::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::GetBlobOutput,
+                >,
+                ::std::rc::Rc<super::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::Error>,
+            >,
+        >;
+    }
+    /*
+    datatype Error =
+    | CollectionOfErrors(list: seq<Error>, nameonly message: blob)
+    | Opaque(obj: object)
+    */
+    #[derive(Clone)]
+    pub enum Error {
+        CollectionOfErrors {
+            list: ::dafny_runtime::Sequence<Error>,
+            message: bool,
+        },
+        Opaque {
+            obj: *mut dyn ::std::any::Any,
+        },
+    }
+    impl ::core::fmt::Debug for Error {
+        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
+            match self {
+                Error::CollectionOfErrors { list, message } => f
+                    .debug_struct("Error::CollectionOfErrors")
+                    .field("list", list)
+                    .field("message", message)
+                    .finish(),
+                Error::Opaque { obj } => f.debug_struct("Error::Opaque").field("obj", obj).finish(),
+            }
+        }
+    }
+    impl ::dafny_runtime::DafnyPrint for Error {
+        fn fmt_print(&self, f: &mut std::fmt::Formatter<'_>, in_seq: bool) -> std::fmt::Result {
+            match self {
+                Error::CollectionOfErrors { list, message } => {
+                    write!(f, "Error::CollectionOfErrors(list := ")?;
+                    list.fmt_print(f, false)?;
+                    write!(f, ", message := ")?;
+                    message.fmt_print(f, false)?;
+                    write!(f, ")")
+                }
+                Error::Opaque { obj } => {
+                    write!(f, "Error::Opaque(obj := ")?;
+                    obj.fmt_print(f, false)?;
+                    write!(f, ")")
+                }
+            }
+        }
+    }
+    impl PartialEq<Error> for Error {
+        fn eq(&self, other: &Error) -> bool {
+            match self {
+                Error::CollectionOfErrors { list, message } => match other {
+                    Error::CollectionOfErrors {
+                        list: other_list,
+                        message: other_message,
+                    } => list == other_list && message == other_message,
+                    _ => false,
+                },
+                Error::Opaque { obj } => match other {
+                    Error::Opaque { obj: other_obj } => obj == other_obj,
+                    _ => false,
+                },
+            }
+        }
+    }
+    impl Eq for Error {}
+    impl ::core::hash::Hash for Error {
+        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
+            match self {
+                Error::CollectionOfErrors { list, message } => {
+                    list.hash(state);
+                    message.hash(state);
+                }
+                Error::Opaque { obj } => obj.hash(state),
+            }
+        }
+    }
+
+    pub type OpaqueError = Error;
 }
 
+mod r#_SimpleBlobImpl_Compile {
+    pub struct _default {}
+    impl _default {
+        pub fn new() -> Self {
+            _default {}
+        }
+
+        pub fn _allocated() -> *mut Self {
+            ::dafny_runtime::allocate::<Self>()
+        }
+
+        pub fn GetBlob(
+            config: &::std::rc::Rc<super::r#_SimpleBlobImpl_Compile::Config>,
+            input: &::std::rc::Rc<
+                super::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::GetBlobInput,
+            >,
+        ) -> ::std::rc::Rc<
+            super::r#_Wrappers_Compile::Result<
+                ::std::rc::Rc<
+                    super::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::GetBlobOutput,
+                >,
+                ::std::rc::Rc<super::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::Error>,
+            >,
+        > {
+            let mut output = ::dafny_runtime::MaybePlacebo::<::std::rc::Rc<super::r#_Wrappers_Compile::Result<::std::rc::Rc<super::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::GetBlobOutput>, ::std::rc::Rc<super::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::Error>>>>::new();
+            let mut res: ::std::rc::Rc<super::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::GetBlobOutput> = ::std::rc::Rc::new(super::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::GetBlobOutput::GetBlobOutput {
+            value: input.value().clone()
+          });
+            res = ::std::rc::Rc::new(super::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::GetBlobOutput::GetBlobOutput {
+            value: input.value().clone()
+          });
+            output = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(
+                super::r#_Wrappers_Compile::Result::<
+                    ::std::rc::Rc<
+                        super::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::GetBlobOutput,
+                    >,
+                    ::std::rc::Rc<super::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::Error>,
+                >::Success {
+                    value: res.clone(),
+                },
+            ));
+            return output.read();
+            return output.read();
+        }
+    }
+    impl ::std::default::Default for _default {
+        fn default() -> Self {
+            _default::new()
+        }
+    }
+    impl ::dafny_runtime::DafnyPrint for _default {
+        fn fmt_print(
+            &self,
+            _formatter: &mut ::std::fmt::Formatter,
+            _in_seq: bool,
+        ) -> std::fmt::Result {
+            write!(_formatter, "SimpleBlobImpl_Compile.__default")
+        }
+    }
+    impl ::std::cmp::PartialEq for _default {
+        fn eq(&self, other: &Self) -> bool {
+            ::std::ptr::eq(self, other)
+        }
+    }
+    #[derive(PartialEq, Clone)]
+    pub enum Config {
+        Config {},
+    }
+    impl Config {}
+
+    impl ::dafny_runtime::DafnyPrint for Config {
+        fn fmt_print(
+            &self,
+            _formatter: &mut ::std::fmt::Formatter,
+            _in_seq: bool,
+        ) -> std::fmt::Result {
+            match self {
+                Config::Config {} => {
+                    write!(_formatter, "SimpleBlobImpl_Compile.Config.Config")?;
+                    Ok(())
+                }
+            }
+        }
+    }
+
+    impl ::std::default::Default for Config {
+        fn default() -> Config {
+            Config::Config {}
+        }
+    }
+
+    impl ::std::convert::AsRef<Config> for &Config {
+        fn as_ref(&self) -> Self {
+            self
+        }
+    }
+}
+// SimpleBlob
+pub mod r#_simple_dtypes_dsmithyblob_dinternaldafny {
+    pub struct _default {}
+
+    impl _default {
+        pub fn new() -> Self {
+            _default {}
+        }
+
+        pub fn DefaultSimpleBlobConfig(
+        ) -> super::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::SimpleBlobConfig {
+            super::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::SimpleBlobConfig::SimpleBlobConfig{}
+        }
+
+        /*method SimpleBlob(config: SimpleBlobConfig)
+        returns (res: Result<ISimpleTypesBlobClient, Error>) {
+            var client := new SimpleBlobClient(Operations.Config);
+            return Success(client);
+        } */
+    pub fn SimpleBlob(config: &::std::rc::Rc<super::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::SimpleBlobConfig>)
+        -> ::std::rc::Rc<super::r#_Wrappers_Compile::Result<*mut dyn super::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::ISimpleTypesBlobClient, ::std::rc::Rc<super::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::Error>>>{
+            let client: *mut SimpleBlobClient = ::dafny_runtime::allocate::<SimpleBlobClient>();
+            SimpleBlobClient::_ctor(
+                client,
+                &::std::rc::Rc::new(super::r#_SimpleBlobImpl_Compile::Config::Config {}),
+            );
+            let v = client as *mut dyn super::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::ISimpleTypesBlobClient;
+            // build a success
+            ::std::rc::Rc::new(super::r#_Wrappers_Compile::Result::<*mut dyn super::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::ISimpleTypesBlobClient, ::std::rc::Rc<super::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::Error>>::Success{
+          value: v
+      })
+        }
+    }
+
+    struct SimpleBlobClient {
+        r#_i_config: ::std::rc::Rc<super::r#_SimpleBlobImpl_Compile::Config>,
+    }
+
+    impl SimpleBlobClient {
+        fn _ctor(
+            this: *mut SimpleBlobClient,
+            config: &::std::rc::Rc<super::r#_SimpleBlobImpl_Compile::Config>,
+        ) {
+            let mut _i_set_config = false;
+            ::dafny_runtime::update_field_uninit!(this, r#_i_config, _i_set_config, config.clone());
+        }
+        fn config(&self) -> ::std::rc::Rc<super::r#_SimpleBlobImpl_Compile::Config> {
+            self.r#_i_config.clone()
+        }
+    }
+
+    impl super::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::ISimpleTypesBlobClient
+        for SimpleBlobClient
+    {
+        fn GetBlob(
+            self: &Self,
+            input: &::std::rc::Rc<
+                super::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::GetBlobInput,
+            >,
+        ) -> ::std::rc::Rc<
+            super::r#_Wrappers_Compile::Result<
+                ::std::rc::Rc<
+                    super::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::GetBlobOutput,
+                >,
+                ::std::rc::Rc<super::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::Error>,
+            >,
+        > {
+            super::r#_SimpleBlobImpl_Compile::_default::GetBlob(&self.config(), input)
+        }
+    }
+    ::dafny_runtime::UpcastTo!(
+        SimpleBlobClient,
+        dyn super::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::ISimpleTypesBlobClient
+    );
 }
-mod r#_module {
 
-}
\ No newline at end of file
+mod r#_StandardLibraryInterop_Compile {
+    pub struct WrappersInterop {}
+
+    impl WrappersInterop {
+        pub fn new() -> Self {
+            WrappersInterop {}
+        }
+        pub fn _allocated() -> *mut Self {
+            ::dafny_runtime::allocate::<Self>()
+        }
+        pub fn CreateStringSome(
+            s: &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
+        ) -> ::std::rc::Rc<
+            super::r#_Wrappers_Compile::Option<
+                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
+            >,
+        > {
+            ::std::rc::Rc::new(super::r#_Wrappers_Compile::Option::<
+                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
+            >::Some {
+                value: s.clone(),
+            })
+        }
+        pub fn CreateStringNone() -> ::std::rc::Rc<
+            super::r#_Wrappers_Compile::Option<
+                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
+            >,
+        > {
+            ::std::rc::Rc::new(super::r#_Wrappers_Compile::Option::<
+                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
+            >::None {})
+        }
+        pub fn CreateBlobSome(
+            b: ::dafny_runtime::Sequence<::std::primitive::u8>,
+        ) -> ::std::rc::Rc<
+            super::r#_Wrappers_Compile::Option<::dafny_runtime::Sequence<::std::primitive::u8>>,
+        > {
+            ::std::rc::Rc::new(super::r#_Wrappers_Compile::Option::<
+                ::dafny_runtime::Sequence<::std::primitive::u8>,
+            >::Some {
+                value: b,
+            })
+        }
+        pub fn CreateBlobNone() -> ::std::rc::Rc<
+            super::r#_Wrappers_Compile::Option<::dafny_runtime::Sequence<::std::primitive::u8>>,
+        > {
+            ::std::rc::Rc::new(super::r#_Wrappers_Compile::Option::<
+                ::dafny_runtime::Sequence<::std::primitive::u8>,
+            >::None {})
+        }
+    }
+
+    impl ::std::default::Default for WrappersInterop {
+        fn default() -> Self {
+            WrappersInterop::new()
+        }
+    }
+
+    impl ::dafny_runtime::DafnyPrint for WrappersInterop {
+        fn fmt_print(
+            &self,
+            _formatter: &mut ::std::fmt::Formatter,
+            _in_seq: bool,
+        ) -> std::fmt::Result {
+            write!(_formatter, "StandardLibraryInterop_Compile.WrappersInterop")
+        }
+    }
+
+    impl ::std::cmp::PartialEq for WrappersInterop {
+        fn eq(&self, other: &Self) -> bool {
+            ::std::ptr::eq(self, other)
+        }
+    }
+}
+mod _module {}
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/client.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/client.rs
new file mode 100644
index 00000000..ee9432a0
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/client.rs
@@ -0,0 +1,65 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use aws_smithy_types::error::operation::BuildError;
+
+#[derive(Debug)]
+pub(crate) struct Handle {
+    pub(crate) conf: crate::Config,
+    pub(crate) inner: *mut dyn ::simple_blob_dafny::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::ISimpleTypesBlobClient
+}
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct Client {
+    handle: ::std::sync::Arc<Handle>,
+}
+
+impl Client {
+    /// Creates a new client from the service [`Config`](crate::Config).
+    #[track_caller]
+    pub fn from_conf(conf: crate::Config) -> Result<Self, BuildError> {
+        // If this service had any configuration properties,
+        // they would need converting here too.
+        let inner_config = ::std::rc::Rc::new(
+            ::simple_blob_dafny::_simple_dtypes_dsmithyblob_dinternaldafny::_default::DefaultSimpleBlobConfig());
+        let inner =
+            ::simple_blob_dafny::_simple_dtypes_dsmithyblob_dinternaldafny::_default::SimpleBlob(
+                &inner_config,
+            );
+        if matches!(
+            inner.as_ref(),
+            ::simple_blob_dafny::_Wrappers_Compile::Result::Failure { .. }
+        ) {
+            // TODO: convert error - the potential types are not modeled!
+            return Err(BuildError::other(
+                ::aws_smithy_types::error::metadata::ErrorMetadata::builder()
+                    .message("Invalid client config")
+                    .build(),
+            ));
+        }
+        let handle = Handle {
+            conf: conf.clone(),
+            inner: inner.Extract(),
+        };
+        Ok(Self {
+            handle: ::std::sync::Arc::new(handle),
+        })
+    }
+
+    /// Returns the client's configuration.
+    pub fn config(&self) -> &crate::Config {
+        &self.handle.conf
+    }
+}
+
+impl Drop for Handle {
+    fn drop(&mut self) {
+        // Ensure the Dafny values we created by calling SimpleBlob are deallocated.
+        unsafe {
+            drop(Box::from_raw(self.inner));
+        }
+    }
+}
+
+mod get_blob;
+
+mod get_blob_known_value;
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/client/get_blob.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/client/get_blob.rs
new file mode 100644
index 00000000..15b51c1a
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/client/get_blob.rs
@@ -0,0 +1,13 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`GetBlob`](crate::operation::get_blob::builders::GetBlobFluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(impl Into<::dafny_runtime::Sequence<u8>>)`](crate::operation::get_blob::builders::GetBlobFluentBuilder::value) / [`set_value(Option<::dafny_runtime::Sequence<u8>>)`](crate::operation::get_blob::builders::GetBlobFluentBuilder::set_value):(undocumented)<br>
+    /// - On success, responds with [`GetBlobOutput`](crate::operation::get_blob::GetBlobOutput) with field(s):
+    ///   - [`value(Option<Blob>)`](crate::operation::get_blob::GetBlobOutput::value): (undocumented)
+    /// - On failure, responds with [`SdkError<GetBlobError>`](crate::operation::get_blob::GetBlobError)
+    pub fn get_blob(&self) -> crate::operation::get_blob::builders::GetBlobFluentBuilder {
+        crate::operation::get_blob::builders::GetBlobFluentBuilder::new(self.handle.clone())
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/client/get_blob_known_value.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/client/get_blob_known_value.rs
new file mode 100644
index 00000000..691f8219
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/client/get_blob_known_value.rs
@@ -0,0 +1,17 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`GetBlob`](crate::operation::get_blob_known_value::builders::GetBlobFluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(impl Into<::dafny_runtime::Sequence<u8>>)`](crate::operation::get_blob_known_value::builders::GetBlobFluentBuilder::value) / [`set_value(Option<::dafny_runtime::Sequence<u8>>)`](crate::operation::get_blob_known_value::builders::GetBlobFluentBuilder::set_value):(undocumented)<br>
+    /// - On success, responds with [`GetBlobOutput`](crate::operation::get_blob_known_value::GetBlobOutput) with field(s):
+    ///   - [`value(Option<Blob>)`](crate::operation::get_blob_known_value::GetBlobOutput::value): (undocumented)
+    /// - On failure, responds with [`SdkError<GetBlobError>`](crate::operation::get_blob_known_value::GetBlobError)
+    pub fn get_blob_known_value(
+        &self,
+    ) -> crate::operation::get_blob_known_value::builders::GetBlobKnownValueFluentBuilder {
+        crate::operation::get_blob_known_value::builders::GetBlobKnownValueFluentBuilder::new(
+            self.handle.clone(),
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/config.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/config.rs
new file mode 100644
index 00000000..fbc410a0
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/config.rs
@@ -0,0 +1,128 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+/// Configuration for a simple service client.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct Config {
+    behavior_version: ::std::option::Option<crate::config::BehaviorVersion>,
+}
+impl Config {
+    /// Constructs a config builder.
+    pub fn builder() -> Builder {
+        Builder::default()
+    }
+    /// Converts this config back into a builder so that it can be tweaked.
+    pub fn to_builder(&self) -> Builder {
+        Builder {
+            behavior_version: self.behavior_version.clone(),
+        }
+    }
+}
+/// Builder for creating a `Config`.
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct Builder {
+    pub(crate) behavior_version: ::std::option::Option<crate::config::BehaviorVersion>,
+}
+impl ::std::default::Default for Builder {
+    fn default() -> Self {
+        Self {
+            behavior_version: ::std::default::Default::default(),
+        }
+    }
+}
+impl Builder {
+    /// Constructs a config builder.
+    pub fn new() -> Self {
+        Self::default()
+    }
+
+    /// Sets the [`behavior major version`](crate::config::BehaviorVersion).
+    ///
+    /// Over time, new best-practice behaviors are introduced. However, these behaviors might not be backwards
+    /// compatible. For example, a change which introduces new default timeouts or a new retry-mode for
+    /// all operations might be the ideal behavior but could break existing applications.
+    ///
+    /// # Examples
+    ///
+    /// Set the behavior major version to `latest`. This is equivalent to enabling the `behavior-version-latest` cargo feature.
+    /// ```no_run
+    /// use simple_blob::config::BehaviorVersion;
+    ///
+    /// let config = simple_blob::Config::builder()
+    ///     .behavior_version(BehaviorVersion::latest())
+    ///     // ...
+    ///     .build();
+    /// let client = simple_blob::Client::from_conf(config);
+    /// ```
+    ///
+    /// Customizing behavior major version:
+    /// ```no_run
+    /// use simple_blob::config::BehaviorVersion;
+    ///
+    /// let config = simple_blob::Config::builder()
+    ///     .behavior_version(BehaviorVersion::v2023_11_09())
+    ///     // ...
+    ///     .build();
+    /// let client = simple_blob::Client::from_conf(config);
+    /// ```
+
+    pub fn behavior_version(mut self, behavior_version: crate::config::BehaviorVersion) -> Self {
+        self.set_behavior_version(Some(behavior_version));
+        self
+    }
+
+    /// Sets the [`behavior major version`](crate::config::BehaviorVersion).
+    ///
+    /// Over time, new best-practice behaviors are introduced. However, these behaviors might not be backwards
+    /// compatible. For example, a change which introduces new default timeouts or a new retry-mode for
+    /// all operations might be the ideal behavior but could break existing applications.
+    ///
+    /// # Examples
+    ///
+    /// Set the behavior major version to `latest`. This is equivalent to enabling the `behavior-version-latest` cargo feature.
+    /// ```no_run
+    /// use simple_blob::config::BehaviorVersion;
+    ///
+    /// let config = simple_blob::Config::builder()
+    ///     .behavior_version(BehaviorVersion::latest())
+    ///     // ...
+    ///     .build();
+    /// let client = simple_blob::Client::from_conf(config);
+    /// ```
+    ///
+    /// Customizing behavior major version:
+    /// ```no_run
+    /// use simple_blob::config::BehaviorVersion;
+    ///
+    /// let config = simple_blob::Config::builder()
+    ///     .behavior_version(BehaviorVersion::v2023_11_09())
+    ///     // ...
+    ///     .build();
+    /// let client = simple_blob::Client::from_conf(config);
+    /// ```
+
+    pub fn set_behavior_version(
+        &mut self,
+        behavior_version: Option<crate::config::BehaviorVersion>,
+    ) -> &mut Self {
+        self.behavior_version = behavior_version;
+        self
+    }
+
+    /// Convenience method to set the latest behavior major version
+    ///
+    /// This is equivalent to enabling the `behavior-version-latest` Cargo feature
+    pub fn behavior_version_latest(mut self) -> Self {
+        self.set_behavior_version(Some(crate::config::BehaviorVersion::latest()));
+        self
+    }
+    /// Builds a [`Config`].
+    #[allow(unused_mut)]
+    pub fn build(mut self) -> Config {
+        Config {
+            behavior_version: self.behavior_version,
+        }
+    }
+}
+
+pub use ::aws_smithy_runtime_api::client::behavior_version::BehaviorVersion;
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions.rs
new file mode 100644
index 00000000..c36bf85b
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions.rs
@@ -0,0 +1,4 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub mod get_blob;
+
+pub mod get_blob_known_value;
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob.rs
new file mode 100644
index 00000000..20a8f14c
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob.rs
@@ -0,0 +1,32 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use std::any::Any;
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::get_blob::GetBlobError,
+) -> ::std::rc::Rc<::simple_blob_dafny::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::Error> {
+    match value {
+    crate::operation::get_blob::GetBlobError::Unhandled(unhandled) =>
+      ::std::rc::Rc::new(::simple_blob_dafny::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::Error::Opaque { obj: Box::into_raw(Box::new(unhandled) as Box<dyn Any>) })
+  }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        ::simple_blob_dafny::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::Error,
+    >,
+) -> crate::operation::get_blob::GetBlobError {
+    // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+    if matches!(&dafny_value.as_ref(), ::simple_blob_dafny::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::Error::CollectionOfErrors { .. }) {
+    let error_message = "TODO: can't get message yet";
+    crate::operation::get_blob::GetBlobError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
+  } else {
+    crate::operation::get_blob::GetBlobError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
+  }
+}
+
+pub mod _get_blob_input;
+
+pub mod _get_blob_output;
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob/_get_blob_input.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob/_get_blob_input.rs
new file mode 100644
index 00000000..3b556a09
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob/_get_blob_input.rs
@@ -0,0 +1,37 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_blob::GetBlobInput,
+) -> ::std::rc::Rc<
+    ::simple_blob_dafny::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::GetBlobInput,
+> {
+    let dafny_value = match value.value {
+        Some(b) => ::simple_blob_dafny::_Wrappers_Compile::Option::Some { value: b },
+        None => ::simple_blob_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(::simple_blob_dafny::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::GetBlobInput::GetBlobInput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_blob_dafny::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::GetBlobInput,
+    >,
+) -> crate::operation::get_blob::GetBlobInput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_blob_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(dafny_value.value().Extract())
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_blob_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_blob::GetBlobInput { value }
+}
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob/_get_blob_output.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob/_get_blob_output.rs
new file mode 100644
index 00000000..81df1f37
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob/_get_blob_output.rs
@@ -0,0 +1,37 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_blob::GetBlobOutput,
+) -> ::std::rc::Rc<
+    ::simple_blob_dafny::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::GetBlobOutput,
+> {
+    let dafny_value = match value.value {
+        Some(b) => ::simple_blob_dafny::_Wrappers_Compile::Option::Some { value: b },
+        None => ::simple_blob_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(::simple_blob_dafny::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::GetBlobOutput::GetBlobOutput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_blob_dafny::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::GetBlobOutput,
+    >,
+) -> crate::operation::get_blob::GetBlobOutput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_blob_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(dafny_value.value().Extract())
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_blob_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_blob::GetBlobOutput { value }
+}
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob_known_value.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob_known_value.rs
new file mode 100644
index 00000000..a8c942cf
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob_known_value.rs
@@ -0,0 +1,26 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use std::any::Any;
+
+#[allow(dead_code)]
+pub fn to_dafny_error(value: crate::operation::get_blob_known_value::GetBlobKnownValueError) -> ::std::rc::Rc<::simple_blob_dafny::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::Error> {
+  match value {
+    crate::operation::get_blob_known_value::GetBlobKnownValueError::Unhandled(unhandled) => 
+      ::std::rc::Rc::new(::simple_blob_dafny::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::Error::Opaque { obj: Box::into_raw(Box::new(unhandled) as Box<dyn Any>) })
+  }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(dafny_value: ::std::rc::Rc<::simple_blob_dafny::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::Error>) -> crate::operation::get_blob_known_value::GetBlobKnownValueError {
+  // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+  if matches!(&dafny_value.as_ref(), ::simple_blob_dafny::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::Error::CollectionOfErrors { .. }) {
+    let error_message = "TODO: can't get message yet";
+    crate::operation::get_blob_known_value::GetBlobKnownValueError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
+  } else {
+    crate::operation::get_blob_known_value::GetBlobKnownValueError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
+  }
+}
+
+pub mod _get_blob_known_value_input;
+
+pub mod _get_blob_known_value_output;
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob_known_value/_get_blob_known_value_input.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob_known_value/_get_blob_known_value_input.rs
new file mode 100644
index 00000000..b65fa500
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob_known_value/_get_blob_known_value_input.rs
@@ -0,0 +1,37 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_blob_known_value::GetBlobKnownValueInput,
+) -> ::std::rc::Rc<
+    ::simple_blob_dafny::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::GetBlobInput,
+> {
+    let dafny_value = match value.value {
+        Some(s) => ::simple_blob_dafny::_Wrappers_Compile::Option::Some { value: s },
+        None => ::simple_blob_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(::simple_blob_dafny::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::GetBlobInput::GetBlobInput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_blob_dafny::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::GetBlobInput,
+    >,
+) -> crate::operation::get_blob_known_value::GetBlobKnownValueInput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_blob_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(dafny_value.value().Extract())
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_blob_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_blob_known_value::GetBlobKnownValueInput { value }
+}
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob_known_value/_get_blob_known_value_output.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob_known_value/_get_blob_known_value_output.rs
new file mode 100644
index 00000000..684049b3
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob_known_value/_get_blob_known_value_output.rs
@@ -0,0 +1,37 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_blob_known_value::GetBlobKnownValueOutput,
+) -> ::std::rc::Rc<
+    ::simple_blob_dafny::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::GetBlobOutput,
+> {
+    let dafny_value = match value.value {
+        Some(s) => ::simple_blob_dafny::_Wrappers_Compile::Option::Some { value: s },
+        None => ::simple_blob_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(::simple_blob_dafny::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::GetBlobOutput::GetBlobOutput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_blob_dafny::r#_simple_dtypes_dsmithyblob_dinternaldafny_dtypes::GetBlobOutput,
+    >,
+) -> crate::operation::get_blob_known_value::GetBlobKnownValueOutput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_blob_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(dafny_value.value().Extract())
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_blob_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_blob_known_value::GetBlobKnownValueOutput { value }
+}
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/error.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/error.rs
new file mode 100644
index 00000000..ec89cbec
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/error.rs
@@ -0,0 +1,14 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use ::aws_smithy_runtime_api::box_error::BoxError;
+
+/// Error type returned by the client.
+pub type SdkError<E, R = ::aws_smithy_runtime_api::client::orchestrator::HttpResponse> =
+    ::aws_smithy_runtime_api::client::result::SdkError<E, R>;
+pub use ::aws_smithy_runtime_api::client::result::ConnectorError;
+pub use ::aws_smithy_types::error::operation::BuildError;
+
+pub use ::aws_smithy_types::error::display::DisplayErrorContext;
+pub use ::aws_smithy_types::error::metadata::ErrorMetadata;
+pub use ::aws_smithy_types::error::metadata::ProvideErrorMetadata;
+
+pub(crate) mod sealed_unhandled;
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/error/sealed_unhandled.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/error/sealed_unhandled.rs
new file mode 100644
index 00000000..9d21fbd6
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/error/sealed_unhandled.rs
@@ -0,0 +1,22 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// This struct is not intended to be used.
+///
+/// This struct holds information about an unhandled error,
+/// but that information should be obtained by using the
+/// [`ProvideErrorMetadata`](::aws_smithy_types::error::metadata::ProvideErrorMetadata) trait
+/// on the error type.
+///
+/// This struct intentionally doesn't yield any useful information itself.
+#[deprecated(
+    note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+variable wildcard pattern and check `.code()`:
+ \
+&nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+ \
+See [`ProvideErrorMetadata`](::aws_smithy_types::error::metadata::ProvideErrorMetadata) for what information is available for the error."
+)]
+#[derive(Debug)]
+pub struct Unhandled {
+    pub(crate) source: ::aws_smithy_runtime_api::box_error::BoxError,
+    pub(crate) meta: ::aws_smithy_types::error::metadata::ErrorMetadata,
+}
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/lib.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/lib.rs
new file mode 100644
index 00000000..347c1153
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/lib.rs
@@ -0,0 +1,21 @@
+#![allow(deprecated)]
+
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[doc(inline)]
+pub use config::Config;
+
+pub mod client;
+
+/// Configuration for SimpleBlob Service.
+pub mod config;
+
+/// Common errors and error handling utilities.
+pub mod error;
+
+/// All operations that this crate can perform.
+pub mod operation;
+
+mod conversions;
+
+pub use client::Client;
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation.rs
new file mode 100644
index 00000000..a72267ed
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation.rs
@@ -0,0 +1,7 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+/// Types for the `GetBlob` operation.
+pub mod get_blob;
+
+/// Types for the `GetBlobKnownValue` operation.
+pub mod get_blob_known_value;
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob.rs
new file mode 100644
index 00000000..0618c678
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob.rs
@@ -0,0 +1,143 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `GetBlob`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct GetBlob;
+impl GetBlob {
+    /// Creates a new `GetBlob`
+    pub fn new() -> Self {
+        Self
+    }
+    pub(crate) async fn send(
+        handle: &crate::client::Handle,
+        input: crate::operation::get_blob::GetBlobInput,
+    ) -> ::std::result::Result<
+        crate::operation::get_blob::GetBlobOutput,
+        crate::operation::get_blob::GetBlobError,
+    > {
+        let inner_input = crate::conversions::get_blob::_get_blob_input::to_dafny(input);
+        let inner_result =
+            ::simple_blob_dafny::dafny_runtime::read!(handle.inner).GetBlob(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            ::simple_blob_dafny::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(crate::conversions::get_blob::_get_blob_output::from_dafny(
+                inner_result.value().clone(),
+            ))
+        } else {
+            Err(crate::conversions::get_blob::from_dafny_error(
+                inner_result.error().clone(),
+            ))
+        }
+    }
+}
+
+/// Error type for the `GetBlob` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum GetBlobError {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-GetBlobError) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl GetBlobError {
+    /// Creates the `GetBlobError::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Creates the `GetBlobError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for GetBlobError {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for GetBlobError {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for GetBlobError {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for GetBlobError {
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError for GetBlobError {
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::get_blob::_get_blob_output::GetBlobOutput;
+
+pub use crate::operation::get_blob::_get_blob_input::GetBlobInput;
+
+mod _get_blob_input;
+
+mod _get_blob_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob/_get_blob_input.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob/_get_blob_input.rs
new file mode 100644
index 00000000..d0c5c2aa
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob/_get_blob_input.rs
@@ -0,0 +1,64 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetBlobInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<::dafny_runtime::Sequence<::std::primitive::u8>>,
+}
+impl GetBlobInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn message(
+        &self,
+    ) -> ::std::option::Option<&::dafny_runtime::Sequence<::std::primitive::u8>> {
+        self.value.as_ref()
+    }
+}
+impl GetBlobInput {
+    /// Creates a new builder-style object to manufacture [`GetBlobInput`](crate::operation::operation::GetBlobInput).
+    pub fn builder() -> crate::operation::get_blob::builders::GetBlobInputBuilder {
+        crate::operation::get_blob::builders::GetBlobInputBuilder::default()
+    }
+}
+
+/// A builder for [`GetBlobInput`](crate::operation::operation::GetBlobInput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetBlobInputBuilder {
+    pub(crate) value: ::std::option::Option<::dafny_runtime::Sequence<::std::primitive::u8>>,
+}
+impl GetBlobInputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(
+        mut self,
+        input: impl ::std::convert::Into<::dafny_runtime::Sequence<::std::primitive::u8>>,
+    ) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<::dafny_runtime::Sequence<::std::primitive::u8>>,
+    ) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(
+        &self,
+    ) -> ::std::option::Option<&::dafny_runtime::Sequence<::std::primitive::u8>> {
+        self.value.as_ref()
+    }
+    /// Consumes the builder and constructs a [`GetBlobInput`](crate::operation::operation::GetBlobInput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_blob::GetBlobInput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(crate::operation::get_blob::GetBlobInput { value: self.value })
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob/_get_blob_output.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob/_get_blob_output.rs
new file mode 100644
index 00000000..19d08cbb
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob/_get_blob_output.rs
@@ -0,0 +1,68 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetBlobOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<::dafny_runtime::Sequence<::std::primitive::u8>>,
+}
+
+impl GetBlobOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<&::dafny_runtime::Sequence<::std::primitive::u8>> {
+        self.value.as_ref()
+    }
+}
+
+impl GetBlobOutput {
+    /// Creates a new builder-style object to manufacture [`GetBlobOutput`](crate::operation::operation::GetBlobOutput).
+    pub fn builder() -> crate::operation::get_blob::builders::GetBlobOutputBuilder {
+        crate::operation::get_blob::builders::GetBlobOutputBuilder::default()
+    }
+}
+
+/// A builder for [`GetBlobOutput`](crate::operation::operation::GetBlobOutput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetBlobOutputBuilder {
+    pub(crate) value: ::std::option::Option<::dafny_runtime::Sequence<::std::primitive::u8>>,
+}
+
+impl GetBlobOutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(
+        mut self,
+        input: impl ::std::convert::Into<::dafny_runtime::Sequence<::std::primitive::u8>>,
+    ) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<::dafny_runtime::Sequence<::std::primitive::u8>>,
+    ) -> Self {
+        self.value = input;
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(
+        &self,
+    ) -> ::std::option::Option<&::dafny_runtime::Sequence<::std::primitive::u8>> {
+        self.value.as_ref()
+    }
+
+    /// Consumes the builder and constructs a [`GetBlobOutput`](crate::operation::operation::GetBlobOutput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_blob::GetBlobOutput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(crate::operation::get_blob::GetBlobOutput { value: self.value })
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob/builders.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob/builders.rs
new file mode 100644
index 00000000..afbf6094
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob/builders.rs
@@ -0,0 +1,97 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::get_blob::_get_blob_output::GetBlobOutputBuilder;
+
+pub use crate::operation::get_blob::_get_blob_input::GetBlobInputBuilder;
+
+impl GetBlobInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::get_blob::GetBlobOutput,
+        crate::operation::get_blob::GetBlobError,
+    > {
+        let mut fluent_builder = client.get_blob();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+/// Fluent builder constructing a request to `GetBlob`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct GetBlobFluentBuilder {
+    handle: ::std::sync::Arc<crate::client::Handle>,
+    inner: crate::operation::get_blob::builders::GetBlobInputBuilder,
+    config_override: ::std::option::Option<crate::config::Builder>,
+}
+impl GetBlobFluentBuilder {
+    /// Creates a new `GetBlob`.
+    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
+        Self {
+            handle,
+            inner: ::std::default::Default::default(),
+            config_override: ::std::option::Option::None,
+        }
+    }
+    /// Access the GetBlob as a reference.
+    pub fn as_input(&self) -> &crate::operation::get_blob::builders::GetBlobInputBuilder {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_blob::GetBlobOutput,
+        crate::operation::get_blob::GetBlobError,
+    > {
+        let input = self
+            .inner
+            .build()
+            // Using unhandled since GetBlob doesn't declare any validation,
+            // and smithy-rs seems to not generate a ValidationError case unless there is
+            // (but isn't that a backwards compatibility problem for output structures?)
+            // Vanilla smithy-rs uses SdkError::construction_failure,
+            // but we aren't using SdkError.
+            .map_err(crate::operation::get_blob::GetBlobError::unhandled)?;
+        crate::operation::get_blob::GetBlob::send(&self.handle, input).await
+    }
+
+    pub(crate) fn config_override(
+        mut self,
+        config_override: impl Into<crate::config::Builder>,
+    ) -> Self {
+        self.set_config_override(Some(config_override.into()));
+        self
+    }
+
+    pub(crate) fn set_config_override(
+        &mut self,
+        config_override: Option<crate::config::Builder>,
+    ) -> &mut Self {
+        self.config_override = config_override;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(
+        mut self,
+        input: impl ::std::convert::Into<::dafny_runtime::Sequence<::std::primitive::u8>>,
+    ) -> Self {
+        self.inner = self.inner.value(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<::dafny_runtime::Sequence<::std::primitive::u8>>,
+    ) -> Self {
+        self.inner = self.inner.set_value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(
+        &self,
+    ) -> ::std::option::Option<&::dafny_runtime::Sequence<::std::primitive::u8>> {
+        self.inner.get_value()
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob_known_value.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob_known_value.rs
new file mode 100644
index 00000000..8da7c6b0
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob_known_value.rs
@@ -0,0 +1,146 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `GetBlobKnownValue`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct GetBlobKnownValue;
+impl GetBlobKnownValue {
+    /// Creates a new `GetBlobKnownValue`
+    pub fn new() -> Self {
+        Self
+    }
+    pub(crate) async fn send(
+        handle: &crate::client::Handle,
+        input: crate::operation::get_blob_known_value::GetBlobKnownValueInput,
+    ) -> ::std::result::Result<
+        crate::operation::get_blob_known_value::GetBlobKnownValueOutput,
+        crate::operation::get_blob_known_value::GetBlobKnownValueError,
+    > {
+        let inner_input =
+            crate::conversions::get_blob_known_value::_get_blob_known_value_input::to_dafny(input);
+        let inner_result =
+            ::simple_blob_dafny::dafny_runtime::read!(handle.inner).GetBlob(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            ::simple_blob_dafny::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(
+                crate::conversions::get_blob_known_value::_get_blob_known_value_output::from_dafny(
+                    inner_result.value().clone(),
+                ),
+            )
+        } else {
+            Err(crate::conversions::get_blob_known_value::from_dafny_error(
+                inner_result.error().clone(),
+            ))
+        }
+    }
+}
+
+/// Error type for the `GetBlobKnownValue` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum GetBlobKnownValueError {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-GetBlobKnownValueError) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl GetBlobKnownValueError {
+    /// Creates the `GetBlobKnownValueError::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Creates the `GetBlobKnownValueError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for GetBlobKnownValueError {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for GetBlobKnownValueError {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for GetBlobKnownValueError {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for GetBlobKnownValueError {
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError for GetBlobKnownValueError {
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::get_blob_known_value::_get_blob_known_value_output::GetBlobKnownValueOutput;
+
+pub use crate::operation::get_blob_known_value::_get_blob_known_value_input::GetBlobKnownValueInput;
+
+mod _get_blob_known_value_input;
+
+mod _get_blob_known_value_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob_known_value/_get_blob_known_value_input.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob_known_value/_get_blob_known_value_input.rs
new file mode 100644
index 00000000..6c0a6409
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob_known_value/_get_blob_known_value_input.rs
@@ -0,0 +1,65 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetBlobKnownValueInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<::dafny_runtime::Sequence<::std::primitive::u8>>,
+}
+impl GetBlobKnownValueInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<&::dafny_runtime::Sequence<::std::primitive::u8>> {
+        self.value.as_ref()
+    }
+}
+impl GetBlobKnownValueInput {
+    /// Creates a new builder-style object to manufacture [`GetBlobKnownValueInput`](crate::operation::operation::GetBlobKnownValueInput).
+    pub fn builder(
+    ) -> crate::operation::get_blob_known_value::builders::GetBlobKnownValueInputBuilder {
+        crate::operation::get_blob_known_value::builders::GetBlobKnownValueInputBuilder::default()
+    }
+}
+
+/// A builder for [`GetBlobKnownValueInput`](crate::operation::operation::GetBlobKnownValueInput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetBlobKnownValueInputBuilder {
+    pub(crate) value: ::std::option::Option<::dafny_runtime::Sequence<::std::primitive::u8>>,
+}
+impl GetBlobKnownValueInputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(
+        mut self,
+        input: impl ::std::convert::Into<::dafny_runtime::Sequence<::std::primitive::u8>>,
+    ) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<::dafny_runtime::Sequence<::std::primitive::u8>>,
+    ) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(
+        &self,
+    ) -> &::std::option::Option<::dafny_runtime::Sequence<::std::primitive::u8>> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetBlobKnownValueInput`](crate::operation::operation::GetBlobKnownValueInput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_blob_known_value::GetBlobKnownValueInput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(
+            crate::operation::get_blob_known_value::GetBlobKnownValueInput { value: self.value },
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob_known_value/_get_blob_known_value_output.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob_known_value/_get_blob_known_value_output.rs
new file mode 100644
index 00000000..ce30bccc
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob_known_value/_get_blob_known_value_output.rs
@@ -0,0 +1,65 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetBlobKnownValueOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<::dafny_runtime::Sequence<::std::primitive::u8>>,
+}
+impl GetBlobKnownValueOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<&::dafny_runtime::Sequence<::std::primitive::u8>> {
+        self.value.as_ref()
+    }
+}
+impl GetBlobKnownValueOutput {
+    /// Creates a new builder-style object to manufacture [`GetBlobKnownValueOutput`](crate::operation::operation::GetBlobKnownValueOutput).
+    pub fn builder(
+    ) -> crate::operation::get_blob_known_value::builders::GetBlobKnownValueOutputBuilder {
+        crate::operation::get_blob_known_value::builders::GetBlobKnownValueOutputBuilder::default()
+    }
+}
+
+/// A builder for [`GetBlobKnownValueOutput`](crate::operation::operation::GetBlobKnownValueOutput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetBlobKnownValueOutputBuilder {
+    pub(crate) value: ::std::option::Option<::dafny_runtime::Sequence<::std::primitive::u8>>,
+}
+impl GetBlobKnownValueOutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(
+        mut self,
+        input: impl ::std::convert::Into<::dafny_runtime::Sequence<::std::primitive::u8>>,
+    ) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<::dafny_runtime::Sequence<::std::primitive::u8>>,
+    ) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(
+        &self,
+    ) -> &::std::option::Option<::dafny_runtime::Sequence<::std::primitive::u8>> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetBlobKnownValueOutput`](crate::operation::operation::GetBlobKnownValueOutput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_blob_known_value::GetBlobKnownValueOutput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(
+            crate::operation::get_blob_known_value::GetBlobKnownValueOutput { value: self.value },
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob_known_value/builders.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob_known_value/builders.rs
new file mode 100644
index 00000000..bc7aea4e
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob_known_value/builders.rs
@@ -0,0 +1,99 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::get_blob_known_value::_get_blob_known_value_output::GetBlobKnownValueOutputBuilder;
+
+pub use crate::operation::get_blob_known_value::_get_blob_known_value_input::GetBlobKnownValueInputBuilder;
+
+impl GetBlobKnownValueInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::get_blob_known_value::GetBlobKnownValueOutput,
+        crate::operation::get_blob_known_value::GetBlobKnownValueError,
+    > {
+        let mut fluent_builder = client.get_blob_known_value();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+/// Fluent builder constructing a request to `GetBlobKnownValue`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct GetBlobKnownValueFluentBuilder {
+    handle: ::std::sync::Arc<crate::client::Handle>,
+    inner: crate::operation::get_blob_known_value::builders::GetBlobKnownValueInputBuilder,
+    config_override: ::std::option::Option<crate::config::Builder>,
+}
+impl GetBlobKnownValueFluentBuilder {
+    /// Creates a new `GetBlobKnownValue`.
+    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
+        Self {
+            handle,
+            inner: ::std::default::Default::default(),
+            config_override: ::std::option::Option::None,
+        }
+    }
+    /// Access the GetBlobKnownValue as a reference.
+    pub fn as_input(
+        &self,
+    ) -> &crate::operation::get_blob_known_value::builders::GetBlobKnownValueInputBuilder {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_blob_known_value::GetBlobKnownValueOutput,
+        crate::operation::get_blob_known_value::GetBlobKnownValueError,
+    > {
+        let input = self
+            .inner
+            .build()
+            // Using unhandled since GetBlob doesn't declare any validation,
+            // and smithy-rs seems to not generate a ValidationError case unless there is
+            // (but isn't that a backwards compatibility problem for output structures?)
+            // Vanilla smithy-rs uses SdkError::construction_failure,
+            // but we aren't using SdkError.
+            .map_err(crate::operation::get_blob_known_value::GetBlobKnownValueError::unhandled)?;
+        crate::operation::get_blob_known_value::GetBlobKnownValue::send(&self.handle, input).await
+    }
+
+    pub(crate) fn config_override(
+        mut self,
+        config_override: impl Into<crate::config::Builder>,
+    ) -> Self {
+        self.set_config_override(Some(config_override.into()));
+        self
+    }
+
+    pub(crate) fn set_config_override(
+        &mut self,
+        config_override: Option<crate::config::Builder>,
+    ) -> &mut Self {
+        self.config_override = config_override;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(
+        mut self,
+        input: impl ::std::convert::Into<::dafny_runtime::Sequence<::std::primitive::u8>>,
+    ) -> Self {
+        self.inner = self.inner.value(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<::dafny_runtime::Sequence<::std::primitive::u8>>,
+    ) -> Self {
+        self.inner = self.inner.set_value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(
+        &self,
+    ) -> &::std::option::Option<::dafny_runtime::Sequence<::std::primitive::u8>> {
+        self.inner.get_value()
+    }
+}
